var search_data = {"index":{"searchIndex":["ohm","basicset","collection","command","connection","error","indexnotfound","list","missingid","model","multiset","mutableset","set","transaction","store","entryalreadyexistserror","noentryerror","uniqueindexviolation","utils","<<()","==()","[]()","[]()","[]()","[]()","[]=()","__save__()","_delete_existing_indices()","_delete_existing_uniques()","_delete_indices()","_delete_uniques()","_detect_duplicate()","_initialize_id()","_read_attributes()","_read_index_type()","_save()","_save_indices()","_save_uniques()","_skip_empty()","_unique_keys()","_verify_uniques()","add()","after()","all()","append()","attribute()","attributes()","attributes()","before()","call()","clean()","collection()","collections()","commit()","conn()","conn()","connect()","connect()","const()","count()","count()","counter()","counters()","create()","db()","db()","decr()","delete()","delete()","delete()","dict()","each()","empty?()","eql?()","except()","except()","exists?()","fetch()","fetch()","filters()","find()","find()","find()","first()","first()","flush()","get()","hash()","id()","ids()","include?()","include?()","incr()","index()","indices()","key()","key()","last()","list()","load!()","lua()","model()","new()","new()","new()","new()","new()","new()","new()","new()","new?()","new_id()","push()","read()","redis()","redis()","reference()","replace()","replace()","reset!()","run()","save()","save!()","set()","set()","size()","size()","sort()","sort_by()","start()","threaded()","to_a()","to_hash()","to_indices()","to_json()","to_json()","to_json()","to_proc()","to_reference()","transaction()","transaction()","union()","union()","unique()","uniques()","unshift()","update()","update_attributes()","watch()","with()","write()"],"longSearchIndex":["ohm","ohm::basicset","ohm::collection","ohm::command","ohm::connection","ohm::error","ohm::indexnotfound","ohm::list","ohm::missingid","ohm::model","ohm::multiset","ohm::mutableset","ohm::set","ohm::transaction","ohm::transaction::store","ohm::transaction::store::entryalreadyexistserror","ohm::transaction::store::noentryerror","ohm::uniqueindexviolation","ohm::utils","ohm::mutableset#<<()","ohm::model#==()","ohm::basicset#[]()","ohm::command::[]()","ohm::model::[]()","ohm::transaction::store#[]()","ohm::transaction::store#[]=()","ohm::model#__save__()","ohm::model#_delete_existing_indices()","ohm::model#_delete_existing_uniques()","ohm::model#_delete_indices()","ohm::model#_delete_uniques()","ohm::model#_detect_duplicate()","ohm::model#_initialize_id()","ohm::model#_read_attributes()","ohm::model#_read_index_type()","ohm::model#_save()","ohm::model#_save_indices()","ohm::model#_save_uniques()","ohm::model#_skip_empty()","ohm::model#_unique_keys()","ohm::model#_verify_uniques()","ohm::mutableset#add()","ohm::transaction#after()","ohm::model::all()","ohm::transaction#append()","ohm::model::attribute()","ohm::model::attributes()","ohm::model#attributes()","ohm::transaction#before()","ohm::command#call()","ohm::command#clean()","ohm::model::collection()","ohm::model::collections()","ohm::transaction#commit()","ohm::conn()","ohm::model::conn()","ohm::connect()","ohm::model::connect()","ohm::utils::const()","ohm::basicset#count()","ohm::list#count()","ohm::model::counter()","ohm::model::counters()","ohm::model::create()","ohm::model::db()","ohm::model#db()","ohm::model#decr()","ohm::list#delete()","ohm::model#delete()","ohm::mutableset#delete()","ohm::utils::dict()","ohm::collection#each()","ohm::collection#empty?()","ohm::model#eql?()","ohm::multiset#except()","ohm::set#except()","ohm::model::exists?()","ohm::collection#fetch()","ohm::model::fetch()","ohm::model::filters()","ohm::model::find()","ohm::multiset#find()","ohm::set#find()","ohm::basicset#first()","ohm::list#first()","ohm::flush()","ohm::model#get()","ohm::model#hash()","ohm::model#id()","ohm::basicset#ids()","ohm::basicset#include?()","ohm::list#include?()","ohm::model#incr()","ohm::model::index()","ohm::model::indices()","ohm::model#key()","ohm::model::key()","ohm::list#last()","ohm::model::list()","ohm::model#load!()","ohm::model::lua()","ohm::model#model()","ohm::command::new()","ohm::connection::new()","ohm::list::new()","ohm::model::new()","ohm::multiset::new()","ohm::set::new()","ohm::transaction::new()","ohm::transaction::store::new()","ohm::model#new?()","ohm::model::new_id()","ohm::list#push()","ohm::transaction#read()","ohm::redis()","ohm::connection#redis()","ohm::model::reference()","ohm::list#replace()","ohm::mutableset#replace()","ohm::connection#reset!()","ohm::transaction#run()","ohm::model#save()","ohm::model#save!()","ohm::model#set()","ohm::model::set()","ohm::basicset#size()","ohm::list#size()","ohm::basicset#sort()","ohm::basicset#sort_by()","ohm::connection#start()","ohm::connection#threaded()","ohm::collection#to_a()","ohm::model#to_hash()","ohm::model::to_indices()","ohm::collection#to_json()","ohm::list#to_json()","ohm::model#to_json()","ohm::model::to_proc()","ohm::model::to_reference()","ohm::transaction()","ohm::model#transaction()","ohm::multiset#union()","ohm::set#union()","ohm::model::unique()","ohm::model::uniques()","ohm::list#unshift()","ohm::model#update()","ohm::model#update_attributes()","ohm::transaction#watch()","ohm::model::with()","ohm::transaction#write()"],"info":[["Ohm","","Ohm.html","",""],["Ohm::BasicSet","","Ohm/BasicSet.html","","<p>Defines most of the methods used by `Set` and `MultiSet`.\n"],["Ohm::Collection","","Ohm/Collection.html","",""],["Ohm::Command","","Ohm/Command.html","",""],["Ohm::Connection","","Ohm/Connection.html","",""],["Ohm::Error","","Ohm/Error.html","","<p>All of the known errors in Ohm can be traced back to one of these\nexceptions.\n<p>MissingID:\n\n<pre>Comment.new.id ...</pre>\n"],["Ohm::IndexNotFound","","Ohm/IndexNotFound.html","",""],["Ohm::List","","Ohm/List.html","",""],["Ohm::MissingID","","Ohm/MissingID.html","",""],["Ohm::Model","","Ohm/Model.html","","<p>The base class for all your models. In order to better understand it, here\nis a semi-realtime explanation …\n"],["Ohm::MultiSet","","Ohm/MultiSet.html","","<p>Anytime you filter a set with more than one requirement, you internally use\na `MultiSet`. `MutiSet` is …\n"],["Ohm::MutableSet","","Ohm/MutableSet.html","",""],["Ohm::Set","","Ohm/Set.html","",""],["Ohm::Transaction","","Ohm/Transaction.html","","<p>Transactions in Ohm are designed to be composable and atomic. They use\nRedis WATCH/MULTI/EXEC to perform …\n"],["Ohm::Transaction::Store","","Ohm/Transaction/Store.html","",""],["Ohm::Transaction::Store::EntryAlreadyExistsError","","Ohm/Transaction/Store/EntryAlreadyExistsError.html","",""],["Ohm::Transaction::Store::NoEntryError","","Ohm/Transaction/Store/NoEntryError.html","",""],["Ohm::UniqueIndexViolation","","Ohm/UniqueIndexViolation.html","",""],["Ohm::Utils","","Ohm/Utils.html","","<p>Instead of monkey patching Kernel or trying to be clever, it’s best to\nconfine all the helper methods …\n"],["<<","Ohm::MutableSet","Ohm/MutableSet.html#method-i-3C-3C","(model)",""],["==","Ohm::Model","Ohm/Model.html#method-i-3D-3D","(other)","<p>Check for equality by doing the following assertions:\n<p>That the passed model is of the same type.\n<p>That they …\n"],["[]","Ohm::BasicSet","Ohm/BasicSet.html#method-i-5B-5D","(id)","<p>Retrieve a specific element using an ID from this set.\n<p>Example:\n\n<pre># Let's say we got the ID 1 from a request ...</pre>\n"],["[]","Ohm::Command","Ohm/Command.html#method-c-5B-5D","(operation, head, *tail)",""],["[]","Ohm::Model","Ohm/Model.html#method-c-5B-5D","(id)","<p>Retrieve a record by ID.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">u</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">create</span>\n<span class=\"ruby-identifier\">u</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">User</span>[<span class=\"ruby-identifier\">u</span>.<span class=\"ruby-identifier\">id</span>]\n<span class=\"ruby-comment\"># =&gt;  true</span>\n</pre>\n"],["[]","Ohm::Transaction::Store","Ohm/Transaction/Store.html#method-i-5B-5D","(key)",""],["[]=","Ohm::Transaction::Store","Ohm/Transaction/Store.html#method-i-5B-5D-3D","(key, value)",""],["__save__","Ohm::Model","Ohm/Model.html#method-i-__save__","()",""],["_delete_existing_indices","Ohm::Model","Ohm/Model.html#method-i-_delete_existing_indices","(existing)",""],["_delete_existing_uniques","Ohm::Model","Ohm/Model.html#method-i-_delete_existing_uniques","(existing)",""],["_delete_indices","Ohm::Model","Ohm/Model.html#method-i-_delete_indices","(indices)",""],["_delete_uniques","Ohm::Model","Ohm/Model.html#method-i-_delete_uniques","(uniques)",""],["_detect_duplicate","Ohm::Model","Ohm/Model.html#method-i-_detect_duplicate","()",""],["_initialize_id","Ohm::Model","Ohm/Model.html#method-i-_initialize_id","()",""],["_read_attributes","Ohm::Model","Ohm/Model.html#method-i-_read_attributes","(attrs)",""],["_read_index_type","Ohm::Model","Ohm/Model.html#method-i-_read_index_type","(type)",""],["_save","Ohm::Model","Ohm/Model.html#method-i-_save","()",""],["_save_indices","Ohm::Model","Ohm/Model.html#method-i-_save_indices","(indices)",""],["_save_uniques","Ohm::Model","Ohm/Model.html#method-i-_save_uniques","(uniques)",""],["_skip_empty","Ohm::Model","Ohm/Model.html#method-i-_skip_empty","(atts)",""],["_unique_keys","Ohm::Model","Ohm/Model.html#method-i-_unique_keys","()",""],["_verify_uniques","Ohm::Model","Ohm/Model.html#method-i-_verify_uniques","()",""],["add","Ohm::MutableSet","Ohm/MutableSet.html#method-i-add","(model)","<p>Add a model directly to the set.\n<p>Example:\n\n<pre>user = User.create\npost = Post.create\n\nuser.posts.add(post)</pre>\n"],["after","Ohm::Transaction","Ohm/Transaction.html#method-i-after","(&block)",""],["all","Ohm::Model","Ohm/Model.html#method-c-all","()","<p>An Ohm::Set wrapper for Model.key.\n"],["append","Ohm::Transaction","Ohm/Transaction.html#method-i-append","(t)",""],["attribute","Ohm::Model","Ohm/Model.html#method-c-attribute","(name, cast = nil)","<p>The bread and butter macro of all models. Basically declares persisted\nattributes. All attributes are …\n"],["attributes","Ohm::Model","Ohm/Model.html#method-c-attributes","()",""],["attributes","Ohm::Model","Ohm/Model.html#method-i-attributes","()",""],["before","Ohm::Transaction","Ohm/Transaction.html#method-i-before","(&block)",""],["call","Ohm::Command","Ohm/Command.html#method-i-call","(nest, db)",""],["clean","Ohm::Command","Ohm/Command.html#method-i-clean","()",""],["collection","Ohm::Model","Ohm/Model.html#method-c-collection","(name, model, reference = to_reference)","<p>A macro for defining a method which basically does a find.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Post</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n  <span class=\"ruby-identifier\">reference</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["collections","Ohm::Model","Ohm/Model.html#method-c-collections","()",""],["commit","Ohm::Transaction","Ohm/Transaction.html#method-i-commit","(db)",""],["conn","Ohm","Ohm.html#method-c-conn","()",""],["conn","Ohm::Model","Ohm/Model.html#method-c-conn","()",""],["connect","Ohm","Ohm.html#method-c-connect","(options = {})","<p>Stores the connection options for the Redis instance.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Ohm</span>.<span class=\"ruby-identifier\">connect</span>(:<span class=\"ruby-identifier\">port</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">6380</span>, :<span class=\"ruby-identifier\">db</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, :<span class=\"ruby-identifier\">host</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["connect","Ohm::Model","Ohm/Model.html#method-c-connect","(options)",""],["const","Ohm::Utils","Ohm/Utils.html#method-c-const","(context, name)","<p>Used by: `attribute`, `counter`, `set`, `reference`, `collection`.\n<p>Employed as a solution to avoid `NameError` …\n"],["count","Ohm::BasicSet","Ohm/BasicSet.html#method-i-count","()",""],["count","Ohm::List","Ohm/List.html#method-i-count","()",""],["counter","Ohm::Model","Ohm/Model.html#method-c-counter","(name)","<p>Declare a counter. All the counters are internally stored in a different\nRedis hash, independent from …\n"],["counters","Ohm::Model","Ohm/Model.html#method-c-counters","()",""],["create","Ohm::Model","Ohm/Model.html#method-c-create","(atts = {})","<p>Syntactic sugar for Model.new(atts).save\n"],["db","Ohm::Model","Ohm/Model.html#method-c-db","()",""],["db","Ohm::Model","Ohm/Model.html#method-i-db","()",""],["decr","Ohm::Model","Ohm/Model.html#method-i-decr","(att, count = 1)","<p>Decrement a counter atomically. Internally uses HINCRBY.\n"],["delete","Ohm::List","Ohm/List.html#method-i-delete","(model)","<p>Delete a model from the list.\n<p>Note: If your list contains the model multiple times, this method will\ndelete …\n"],["delete","Ohm::Model","Ohm/Model.html#method-i-delete","()","<p>Delete the model, including all the following keys:\n<p>&lt;Model&gt;:&lt;id&gt;\n<p>&lt;Model&gt;:&lt;id&gt;:counters …\n"],["delete","Ohm::MutableSet","Ohm/MutableSet.html#method-i-delete","(model)","<p>Remove a model directly from the set.\n<p>Example:\n\n<pre>user = User.create\npost = Post.create\n\nuser.posts.delete(post)</pre>\n"],["dict","Ohm::Utils","Ohm/Utils.html#method-c-dict","(dict)",""],["each","Ohm::Collection","Ohm/Collection.html#method-i-each","()",""],["empty?","Ohm::Collection","Ohm/Collection.html#method-i-empty-3F","()",""],["eql?","Ohm::Model","Ohm/Model.html#method-i-eql-3F","(other)",""],["except","Ohm::MultiSet","Ohm/MultiSet.html#method-i-except","(dict)","<p>Reduce the set using any number of filters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">find</span>(:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;John&quot;</span>)\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">except</span>(:<span class=\"ruby-identifier\">country</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["except","Ohm::Set","Ohm/Set.html#method-i-except","(dict)","<p>Reduce the set using any number of filters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">find</span>(:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;John&quot;</span>)\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">except</span>(:<span class=\"ruby-identifier\">country</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["exists?","Ohm::Model","Ohm/Model.html#method-c-exists-3F","(id)","<p>Check if the ID exists within &lt;Model&gt;:all.\n"],["fetch","Ohm::Collection","Ohm/Collection.html#method-i-fetch","(ids)","<p>Wraps the whole pipelining functionality.\n"],["fetch","Ohm::Model","Ohm/Model.html#method-c-fetch","(ids)","<p>Retrieve a set of models given an array of IDs.\n<p>Example:\n\n<pre>User.fetch([1, 2, 3])</pre>\n"],["filters","Ohm::Model","Ohm/Model.html#method-c-filters","(dict)",""],["find","Ohm::Model","Ohm/Model.html#method-c-find","(dict)","<p>Find values in indexed fields.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">User</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n  <span class=\"ruby-identifier\">attribute</span> :<span class=\"ruby-identifier\">email</span>\n\n  <span class=\"ruby-identifier\">attribute</span> :<span class=\"ruby-identifier\">name</span>\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["find","Ohm::MultiSet","Ohm/MultiSet.html#method-i-find","(dict)","<p>Chain new fiters on an existing set.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">find</span>(:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;John&quot;</span>, :<span class=\"ruby-identifier\">age</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">30</span>)\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">find</span>(:<span class=\"ruby-identifier\">status</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["find","Ohm::Set","Ohm/Set.html#method-i-find","(dict)","<p>Chain new fiters on an existing set.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">find</span>(:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;John&quot;</span>)\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">find</span>(:<span class=\"ruby-identifier\">age</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">30</span>)\n</pre>\n"],["first","Ohm::BasicSet","Ohm/BasicSet.html#method-i-first","(options = {})","<p>Syntactic sugar for `sort_by` or `sort` when you only need the first\nelement.\n<p>Example:\n\n<pre>User.all.first == ...</pre>\n"],["first","Ohm::List","Ohm/List.html#method-i-first","()","<p>Returns the first element of the list using LINDEX.\n"],["flush","Ohm","Ohm.html#method-c-flush","()","<p>Wrapper for Ohm.redis.flushdb.\n"],["get","Ohm::Model","Ohm/Model.html#method-i-get","(att)","<p>Read an attribute remotely from Redis. Useful if you want to get the most\nrecent value of the attribute …\n"],["hash","Ohm::Model","Ohm/Model.html#method-i-hash","()","<p>Return a value that allows the use of models as hash keys.\n<p>Example:\n\n<pre>h = {}\n\nu = User.new\n\nh[:u] = u\nh[:u] ...</pre>\n"],["id","Ohm::Model","Ohm/Model.html#method-i-id","()","<p>Access the ID used to store this model. The ID is used together with the\nname of the class in order to …\n"],["ids","Ohm::BasicSet","Ohm/BasicSet.html#method-i-ids","()","<p>Grab all the elements of this set using SMEMBERS.\n"],["include?","Ohm::BasicSet","Ohm/BasicSet.html#method-i-include-3F","(model)","<p>Check if a model is included in this set.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">u</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">create</span>\n\n<span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">all</span>.<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-identifier\">u</span>)\n<span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["include?","Ohm::List","Ohm/List.html#method-i-include-3F","(model)","<p>Checks if the model is part of this List.\n<p>An important thing to note is that this method loads all of …\n"],["incr","Ohm::Model","Ohm/Model.html#method-i-incr","(att, count = 1)","<p>Increment a counter atomically. Internally uses HINCRBY.\n"],["index","Ohm::Model","Ohm/Model.html#method-c-index","(attribute)","<p>Index any method on your model. Once you index a method, you can use it in\n`find` statements.\n"],["indices","Ohm::Model","Ohm/Model.html#method-c-indices","()",""],["key","Ohm::Model","Ohm/Model.html#method-i-key","()","<p>Manipulate the Redis hash of attributes directly.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">User</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n  <span class=\"ruby-identifier\">attribute</span> :<span class=\"ruby-identifier\">name</span>\n<span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["key","Ohm::Model","Ohm/Model.html#method-c-key","()","<p>The namespace for all the keys generated using this model.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">User</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n\n<span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">key</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["last","Ohm::List","Ohm/List.html#method-i-last","()","<p>Returns the last element of the list using LINDEX.\n"],["list","Ohm::Model","Ohm/Model.html#method-c-list","(name, model)","<p>Declare an Ohm::List with the given name.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Comment</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Post</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["load!","Ohm::Model","Ohm/Model.html#method-i-load-21","()","<p>Preload all the attributes of this model from Redis. Used internally by\n`Model::[]`.\n"],["lua","Ohm::Model","Ohm/Model.html#method-c-lua","()",""],["model","Ohm::Model","Ohm/Model.html#method-i-model","()",""],["new","Ohm::Command","Ohm/Command.html#method-c-new","(operation, *args)",""],["new","Ohm::Connection","Ohm/Connection.html#method-c-new","(context = :main, options = {})",""],["new","Ohm::List","Ohm/List.html#method-c-new","(key, namespace, model)",""],["new","Ohm::Model","Ohm/Model.html#method-c-new","(atts = {})","<p>Initialize a model using a dictionary of attributes.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">u</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;John&quot;</span>)\n</pre>\n"],["new","Ohm::MultiSet","Ohm/MultiSet.html#method-c-new","(namespace, model, command)",""],["new","Ohm::Set","Ohm/Set.html#method-c-new","(key, namespace, model)",""],["new","Ohm::Transaction","Ohm/Transaction.html#method-c-new","()",""],["new","Ohm::Transaction::Store","Ohm/Transaction/Store.html#method-c-new","()",""],["new?","Ohm::Model","Ohm/Model.html#method-i-new-3F","()",""],["new_id","Ohm::Model","Ohm/Model.html#method-c-new_id","()",""],["push","Ohm::List","Ohm/List.html#method-i-push","(model)","<p>Pushes the model to the <em>end</em> of the list using RPUSH.\n"],["read","Ohm::Transaction","Ohm/Transaction.html#method-i-read","(&block)",""],["redis","Ohm","Ohm.html#method-c-redis","()","<p>Use this if you want to do quick ad hoc redis commands against the defined\nOhm connection.\n<p>Examples:\n\n<pre>Ohm.redis.keys(&quot;User:*&quot;) ...</pre>\n"],["redis","Ohm::Connection","Ohm/Connection.html#method-i-redis","()",""],["reference","Ohm::Model","Ohm/Model.html#method-c-reference","(name, model)","<p>A macro for defining an attribute, an index, and an accessor for a given\nmodel.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Post</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replace","Ohm::List","Ohm/List.html#method-i-replace","(models)","<p>Replace all the existing elements of a list with a different collection of\nmodels. This happens atomically …\n"],["replace","Ohm::MutableSet","Ohm/MutableSet.html#method-i-replace","(models)","<p>Replace all the existing elements of a set with a different collection of\nmodels. This happens atomically …\n"],["reset!","Ohm::Connection","Ohm/Connection.html#method-i-reset-21","()",""],["run","Ohm::Transaction","Ohm/Transaction.html#method-i-run","(procs, store)",""],["save","Ohm::Model","Ohm/Model.html#method-i-save","(&block)","<p>Persist the model attributes and update indices and unique indices. The\n`counter`s and `set`s are not …\n"],["save!","Ohm::Model","Ohm/Model.html#method-i-save-21","()","<p>Saves the model without checking for validity. Refer to `Model#save` for\nmore details.\n"],["set","Ohm::Model","Ohm/Model.html#method-i-set","(att, val)","<p>Update an attribute value atomically. The best usecase for this is when you\nsimply want to update one …\n"],["set","Ohm::Model","Ohm/Model.html#method-c-set","(name, model)","<p>Declare an Ohm::Set with the given name.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">User</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n  <span class=\"ruby-identifier\">set</span> :<span class=\"ruby-identifier\">posts</span>, :<span class=\"ruby-constant\">Post</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">u</span> = <span class=\"ruby-operator\">...</span>\n</pre>\n"],["size","Ohm::BasicSet","Ohm/BasicSet.html#method-i-size","()","<p>Returns the total size of the set using SCARD.\n"],["size","Ohm::List","Ohm/List.html#method-i-size","()","<p>Returns the total size of the list using LLEN.\n"],["sort","Ohm::BasicSet","Ohm/BasicSet.html#method-i-sort","(options = {})","<p>Allows you to sort your models using their IDs. This is much faster than\n`sort_by`. If you simply want …\n"],["sort_by","Ohm::BasicSet","Ohm/BasicSet.html#method-i-sort_by","(att, options = {})","<p>Allows you to sort by any field in your model.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">User</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n  <span class=\"ruby-identifier\">attribute</span> :<span class=\"ruby-identifier\">name</span>\n<span class=\"ruby-keyword\">end</span>\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["start","Ohm::Connection","Ohm/Connection.html#method-i-start","(options = {})",""],["threaded","Ohm::Connection","Ohm/Connection.html#method-i-threaded","()",""],["to_a","Ohm::Collection","Ohm/Collection.html#method-i-to_a","()","<p>Fetch the data from Redis in one go.\n"],["to_hash","Ohm::Model","Ohm/Model.html#method-i-to_hash","()","<p>Export the ID and the errors of the model. The approach of Ohm is to\nwhitelist public attributes, as …\n"],["to_indices","Ohm::Model","Ohm/Model.html#method-c-to_indices","(att, val)",""],["to_json","Ohm::Collection","Ohm/Collection.html#method-i-to_json","(*args)","<p>Sugar for to_a.to_json for all types of Sets\n"],["to_json","Ohm::List","Ohm/List.html#method-i-to_json","(*args)","<p>Sugar for to_a.to_json for lists.\n"],["to_json","Ohm::Model","Ohm/Model.html#method-i-to_json","(*args)","<p>Export a JSON representation of the model by encoding `to_hash`.\n"],["to_proc","Ohm::Model","Ohm/Model.html#method-c-to_proc","()","<p>Retrieve a set of models given an array of IDs.\n<p>Example:\n\n<pre>ids = [1, 2, 3]\nids.map(&amp;User)</pre>\n"],["to_reference","Ohm::Model","Ohm/Model.html#method-c-to_reference","()",""],["transaction","Ohm","Ohm.html#method-c-transaction","(&block)",""],["transaction","Ohm::Model","Ohm/Model.html#method-i-transaction","()",""],["union","Ohm::MultiSet","Ohm/MultiSet.html#method-i-union","(dict)","<p>Do a union to the existing set using any number of filters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">find</span>(:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;John&quot;</span>)\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">union</span>(:<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["union","Ohm::Set","Ohm/Set.html#method-i-union","(dict)","<p>Do a union to the existing set using any number of filters.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">find</span>(:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;John&quot;</span>)\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">union</span>(:<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unique","Ohm::Model","Ohm/Model.html#method-c-unique","(attribute)","<p>Create a unique index for any method on your model. Once you add a unique\nindex, you can use it in `with` …\n"],["uniques","Ohm::Model","Ohm/Model.html#method-c-uniques","()",""],["unshift","Ohm::List","Ohm/List.html#method-i-unshift","(model)","<p>Pushes the model to the <em>beginning</em> of the list using LPUSH.\n"],["update","Ohm::Model","Ohm/Model.html#method-i-update","(attributes)","<p>Update the model attributes and call save.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>[<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">update</span>(:<span class=\"ruby-identifier\">name</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;John&quot;</span>)\n\n<span class=\"ruby-comment\"># It's the same as: ...</span>\n</pre>\n"],["update_attributes","Ohm::Model","Ohm/Model.html#method-i-update_attributes","(atts)","<p>Write the dictionary of key-value pairs to the model.\n"],["watch","Ohm::Transaction","Ohm/Transaction.html#method-i-watch","(*keys)",""],["with","Ohm::Model","Ohm/Model.html#method-c-with","(att, val)","<p>Find values in `unique` indices.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">User</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Ohm</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n  <span class=\"ruby-identifier\">unique</span> :<span class=\"ruby-identifier\">email</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">u</span> = <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">create</span>(:<span class=\"ruby-identifier\">email</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["write","Ohm::Transaction","Ohm/Transaction.html#method-i-write","(&block)",""]]}}