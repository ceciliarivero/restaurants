var search_data = {"index":{"searchIndex":["redis","baseconnectionerror","baseerror","basicobject","cannotconnecterror","client","commanderror","connection","commandhelper","hiredis","redisclient","ruby","socketmixin","synchrony","tcpsocket","unixsocket","connectionerror","distributed","cannotdistribute","future","futurenotready","hashring","inheritederror","pipeline","multi","protocolerror","subscribedclient","subscription","timeouterror","[]()","[]()","[]=()","[]=()","_bpop()","_bpop()","_command()","_eval()","_eval()","_parse_driver()","_parse_options()","_read_from_socket()","_read_from_socket()","_set()","add_node()","add_node()","append()","append()","auth()","bgrewriteaof()","bgsave()","bgsave()","binary_search()","bitcount()","bitcount()","bitop()","bitop()","blpop()","blpop()","brpop()","brpop()","brpoplpush()","brpoplpush()","build_command()","call()","call()","call()","call_loop()","call_pipeline()","call_pipeline()","call_pipelined()","call_with_timeout()","call_without_timeout()","commands()","commands()","config()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connected?()","connected?()","connected?()","connected?()","connected?()","connection_completed()","current()","current=()","db()","db=()","dbsize()","dbsize()","debug()","decr()","decr()","decrby()","decrby()","del()","del()","deprecate()","discard()","discard()","disconnect()","disconnect()","disconnect()","disconnect()","drivers()","dump()","dump()","echo()","echo()","encode()","ensure_connected()","ensure_same_node()","establish_connection()","eval()","eval()","evalsha()","evalsha()","exec()","exec()","exists()","exists()","expire()","expire()","expireat()","expireat()","finish()","finish()","flushall()","flushall()","flushdb()","flushdb()","format_bulk_reply()","format_error_reply()","format_integer_reply()","format_multi_bulk_reply()","format_reply()","format_status_reply()","get()","get()","get_node()","get_node_pos()","get_tcp_keepalive()","getbit()","getbit()","getrange()","getrange()","gets()","getset()","getset()","hdel()","hdel()","hexists()","hexists()","hget()","hget()","hgetall()","hgetall()","hincrby()","hincrby()","hincrbyfloat()","hincrbyfloat()","hkeys()","hkeys()","hlen()","hlen()","hmget()","hmget()","hmset()","hmset()","host()","hset()","hset()","hsetnx()","hsetnx()","hvals()","hvals()","id()","id()","incr()","incr()","incrby()","incrby()","incrbyfloat()","incrbyfloat()","info()","info()","inspect()","inspect()","inspect()","io()","iter_nodes()","key_tag()","keys()","keys()","lastsave()","lastsave()","lindex()","lindex()","linsert()","linsert()","llen()","llen()","location()","logging()","lpop()","lpop()","lpush()","lpush()","lpushx()","lpushx()","lrange()","lrange()","lrem()","lrem()","lset()","lset()","ltrim()","ltrim()","mapped_hmget()","mapped_hmget()","mapped_hmset()","mapped_hmset()","mapped_mget()","mapped_mget()","mapped_mset()","mapped_mset()","mapped_msetnx()","mapped_msetnx()","message()","message()","method_missing()","mget()","mget()","monitor()","monitor()","move()","move()","mset()","mset()","msetnx()","msetnx()","multi()","multi()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","node_for()","node_index_for()","nodes()","object()","on_each_node()","password()","path()","persist()","persist()","pexpire()","pexpire()","pexpireat()","pexpireat()","ping()","ping()","pipelined()","pipelined()","pmessage()","port()","post_init()","process()","psetex()","psetex()","psubscribe()","psubscribe()","psubscribe()","psubscribe()","pttl()","pttl()","publish()","publish()","punsubscribe()","punsubscribe()","punsubscribe()","punsubscribe()","quit()","quit()","randomkey()","randomkey()","read()","read()","read()","read()","read()","read()","receive_data()","reconnect()","remove_node()","rename()","rename()","renamenx()","renamenx()","restore()","restore()","rpop()","rpop()","rpoplpush()","rpoplpush()","rpush()","rpush()","rpushx()","rpushx()","sadd()","sadd()","save()","save()","scard()","scard()","scheme()","script()","script()","sdiff()","sdiff()","sdiffstore()","sdiffstore()","select()","select()","send()","set()","set()","set_tcp_keepalive()","setbit()","setbit()","setex()","setex()","setnx()","setnx()","setrange()","setrange()","shutdown()","shutdown?()","sinter()","sinter()","sinterstore()","sinterstore()","sismember()","sismember()","slaveof()","slowlog()","smembers()","smembers()","smove()","smove()","sort()","sort()","spop()","spop()","srandmember()","srandmember()","srem()","srem()","strlen()","strlen()","subscribe()","subscribe()","subscribe()","subscribe()","subscribed?()","subscribed?()","subscription()","sunion()","sunion()","sunionstore()","sunionstore()","sync()","synchronize()","time()","time()","timeout()","timeout=()","timeout=()","timeout=()","timeout=()","ttl()","ttl()","type()","type()","unbind()","unsubscribe()","unsubscribe()","unsubscribe()","unsubscribe()","unwatch()","unwatch()","value()","watch()","watch()","with_reconnect()","with_reconnect()","with_reconnect()","with_reconnect?()","with_socket_timeout()","without_reconnect()","without_reconnect()","without_reconnect()","without_reconnect?()","without_socket_timeout()","write()","write()","write()","write()","zadd()","zadd()","zcard()","zcard()","zcount()","zcount()","zincrby()","zincrby()","zinterstore()","zinterstore()","zrange()","zrange()","zrangebyscore()","zrangebyscore()","zrank()","zrank()","zrem()","zrem()","zremrangebyrank()","zremrangebyrank()","zremrangebyscore()","zremrangebyscore()","zrevrange()","zrevrange()","zrevrangebyscore()","zrevrangebyscore()","zrevrank()","zrevrank()","zscore()","zscore()","zunionstore()","zunionstore()"],"longSearchIndex":["redis","redis::baseconnectionerror","redis::baseerror","redis::basicobject","redis::cannotconnecterror","redis::client","redis::commanderror","redis::connection","redis::connection::commandhelper","redis::connection::hiredis","redis::connection::redisclient","redis::connection::ruby","redis::connection::socketmixin","redis::connection::synchrony","redis::connection::tcpsocket","redis::connection::unixsocket","redis::connectionerror","redis::distributed","redis::distributed::cannotdistribute","redis::future","redis::futurenotready","redis::hashring","redis::inheritederror","redis::pipeline","redis::pipeline::multi","redis::protocolerror","redis::subscribedclient","redis::subscription","redis::timeouterror","redis#[]()","redis::distributed#[]()","redis#[]=()","redis::distributed#[]=()","redis#_bpop()","redis::distributed#_bpop()","redis::future#_command()","redis#_eval()","redis::distributed#_eval()","redis::client#_parse_driver()","redis::client#_parse_options()","redis::connection::socketmixin#_read_from_socket()","redis::connection::unixsocket#_read_from_socket()","redis::future#_set()","redis::distributed#add_node()","redis::hashring#add_node()","redis#append()","redis::distributed#append()","redis#auth()","redis#bgrewriteaof()","redis#bgsave()","redis::distributed#bgsave()","redis::hashring::binary_search()","redis#bitcount()","redis::distributed#bitcount()","redis#bitop()","redis::distributed#bitop()","redis#blpop()","redis::distributed#blpop()","redis#brpop()","redis::distributed#brpop()","redis#brpoplpush()","redis::distributed#brpoplpush()","redis::connection::commandhelper#build_command()","redis::client#call()","redis::pipeline#call()","redis::subscribedclient#call()","redis::client#call_loop()","redis::client#call_pipeline()","redis::pipeline#call_pipeline()","redis::client#call_pipelined()","redis::client#call_with_timeout()","redis::client#call_without_timeout()","redis::pipeline#commands()","redis::pipeline::multi#commands()","redis#config()","redis::connect()","redis::client#connect()","redis::connection::hiredis::connect()","redis::connection::ruby::connect()","redis::connection::synchrony::connect()","redis::connection::tcpsocket::connect()","redis::connection::unixsocket::connect()","redis::client#connected?()","redis::connection::hiredis#connected?()","redis::connection::redisclient#connected?()","redis::connection::ruby#connected?()","redis::connection::synchrony#connected?()","redis::connection::redisclient#connection_completed()","redis::current()","redis::current=()","redis::client#db()","redis::client#db=()","redis#dbsize()","redis::distributed#dbsize()","redis#debug()","redis#decr()","redis::distributed#decr()","redis#decrby()","redis::distributed#decrby()","redis#del()","redis::distributed#del()","redis::deprecate()","redis#discard()","redis::distributed#discard()","redis::client#disconnect()","redis::connection::hiredis#disconnect()","redis::connection::ruby#disconnect()","redis::connection::synchrony#disconnect()","redis::connection::drivers()","redis#dump()","redis::distributed#dump()","redis#echo()","redis::distributed#echo()","redis::connection::commandhelper#encode()","redis::client#ensure_connected()","redis::distributed#ensure_same_node()","redis::client#establish_connection()","redis#eval()","redis::distributed#eval()","redis#evalsha()","redis::distributed#evalsha()","redis#exec()","redis::distributed#exec()","redis#exists()","redis::distributed#exists()","redis#expire()","redis::distributed#expire()","redis#expireat()","redis::distributed#expireat()","redis::pipeline#finish()","redis::pipeline::multi#finish()","redis#flushall()","redis::distributed#flushall()","redis#flushdb()","redis::distributed#flushdb()","redis::connection::ruby#format_bulk_reply()","redis::connection::ruby#format_error_reply()","redis::connection::ruby#format_integer_reply()","redis::connection::ruby#format_multi_bulk_reply()","redis::connection::ruby#format_reply()","redis::connection::ruby#format_status_reply()","redis#get()","redis::distributed#get()","redis::hashring#get_node()","redis::hashring#get_node_pos()","redis::connection::ruby#get_tcp_keepalive()","redis#getbit()","redis::distributed#getbit()","redis#getrange()","redis::distributed#getrange()","redis::connection::socketmixin#gets()","redis#getset()","redis::distributed#getset()","redis#hdel()","redis::distributed#hdel()","redis#hexists()","redis::distributed#hexists()","redis#hget()","redis::distributed#hget()","redis#hgetall()","redis::distributed#hgetall()","redis#hincrby()","redis::distributed#hincrby()","redis#hincrbyfloat()","redis::distributed#hincrbyfloat()","redis#hkeys()","redis::distributed#hkeys()","redis#hlen()","redis::distributed#hlen()","redis#hmget()","redis::distributed#hmget()","redis#hmset()","redis::distributed#hmset()","redis::client#host()","redis#hset()","redis::distributed#hset()","redis#hsetnx()","redis::distributed#hsetnx()","redis#hvals()","redis::distributed#hvals()","redis#id()","redis::client#id()","redis#incr()","redis::distributed#incr()","redis#incrby()","redis::distributed#incrby()","redis#incrbyfloat()","redis::distributed#incrbyfloat()","redis#info()","redis::distributed#info()","redis#inspect()","redis::distributed#inspect()","redis::future#inspect()","redis::client#io()","redis::hashring#iter_nodes()","redis::distributed#key_tag()","redis#keys()","redis::distributed#keys()","redis#lastsave()","redis::distributed#lastsave()","redis#lindex()","redis::distributed#lindex()","redis#linsert()","redis::distributed#linsert()","redis#llen()","redis::distributed#llen()","redis::client#location()","redis::client#logging()","redis#lpop()","redis::distributed#lpop()","redis#lpush()","redis::distributed#lpush()","redis#lpushx()","redis::distributed#lpushx()","redis#lrange()","redis::distributed#lrange()","redis#lrem()","redis::distributed#lrem()","redis#lset()","redis::distributed#lset()","redis#ltrim()","redis::distributed#ltrim()","redis#mapped_hmget()","redis::distributed#mapped_hmget()","redis#mapped_hmset()","redis::distributed#mapped_hmset()","redis#mapped_mget()","redis::distributed#mapped_mget()","redis#mapped_mset()","redis::distributed#mapped_mset()","redis#mapped_msetnx()","redis::distributed#mapped_msetnx()","redis::distributed::cannotdistribute#message()","redis::subscription#message()","redis#method_missing()","redis#mget()","redis::distributed#mget()","redis#monitor()","redis::distributed#monitor()","redis#move()","redis::distributed#move()","redis#mset()","redis::distributed#mset()","redis#msetnx()","redis::distributed#msetnx()","redis#multi()","redis::distributed#multi()","redis::new()","redis::client::new()","redis::connection::hiredis::new()","redis::connection::ruby::new()","redis::connection::socketmixin::new()","redis::connection::synchrony::new()","redis::distributed::new()","redis::distributed::cannotdistribute::new()","redis::future::new()","redis::futurenotready::new()","redis::hashring::new()","redis::pipeline::new()","redis::protocolerror::new()","redis::subscribedclient::new()","redis::subscription::new()","redis::distributed#node_for()","redis::distributed#node_index_for()","redis::distributed#nodes()","redis#object()","redis::distributed#on_each_node()","redis::client#password()","redis::client#path()","redis#persist()","redis::distributed#persist()","redis#pexpire()","redis::distributed#pexpire()","redis#pexpireat()","redis::distributed#pexpireat()","redis#ping()","redis::distributed#ping()","redis#pipelined()","redis::distributed#pipelined()","redis::subscription#pmessage()","redis::client#port()","redis::connection::redisclient#post_init()","redis::client#process()","redis#psetex()","redis::distributed#psetex()","redis#psubscribe()","redis::distributed#psubscribe()","redis::subscribedclient#psubscribe()","redis::subscription#psubscribe()","redis#pttl()","redis::distributed#pttl()","redis#publish()","redis::distributed#publish()","redis#punsubscribe()","redis::distributed#punsubscribe()","redis::subscribedclient#punsubscribe()","redis::subscription#punsubscribe()","redis#quit()","redis::distributed#quit()","redis#randomkey()","redis::distributed#randomkey()","redis::client#read()","redis::connection::hiredis#read()","redis::connection::redisclient#read()","redis::connection::ruby#read()","redis::connection::socketmixin#read()","redis::connection::synchrony#read()","redis::connection::redisclient#receive_data()","redis::client#reconnect()","redis::hashring#remove_node()","redis#rename()","redis::distributed#rename()","redis#renamenx()","redis::distributed#renamenx()","redis#restore()","redis::distributed#restore()","redis#rpop()","redis::distributed#rpop()","redis#rpoplpush()","redis::distributed#rpoplpush()","redis#rpush()","redis::distributed#rpush()","redis#rpushx()","redis::distributed#rpushx()","redis#sadd()","redis::distributed#sadd()","redis#save()","redis::distributed#save()","redis#scard()","redis::distributed#scard()","redis::client#scheme()","redis#script()","redis::distributed#script()","redis#sdiff()","redis::distributed#sdiff()","redis#sdiffstore()","redis::distributed#sdiffstore()","redis#select()","redis::distributed#select()","redis::connection::redisclient#send()","redis#set()","redis::distributed#set()","redis::connection::ruby#set_tcp_keepalive()","redis#setbit()","redis::distributed#setbit()","redis#setex()","redis::distributed#setex()","redis#setnx()","redis::distributed#setnx()","redis#setrange()","redis::distributed#setrange()","redis#shutdown()","redis::pipeline#shutdown?()","redis#sinter()","redis::distributed#sinter()","redis#sinterstore()","redis::distributed#sinterstore()","redis#sismember()","redis::distributed#sismember()","redis#slaveof()","redis#slowlog()","redis#smembers()","redis::distributed#smembers()","redis#smove()","redis::distributed#smove()","redis#sort()","redis::distributed#sort()","redis#spop()","redis::distributed#spop()","redis#srandmember()","redis::distributed#srandmember()","redis#srem()","redis::distributed#srem()","redis#strlen()","redis::distributed#strlen()","redis#subscribe()","redis::distributed#subscribe()","redis::subscribedclient#subscribe()","redis::subscription#subscribe()","redis#subscribed?()","redis::distributed#subscribed?()","redis::subscribedclient#subscription()","redis#sunion()","redis::distributed#sunion()","redis#sunionstore()","redis::distributed#sunionstore()","redis#sync()","redis#synchronize()","redis#time()","redis::distributed#time()","redis::client#timeout()","redis::connection::hiredis#timeout=()","redis::connection::ruby#timeout=()","redis::connection::socketmixin#timeout=()","redis::connection::synchrony#timeout=()","redis#ttl()","redis::distributed#ttl()","redis#type()","redis::distributed#type()","redis::connection::redisclient#unbind()","redis#unsubscribe()","redis::distributed#unsubscribe()","redis::subscribedclient#unsubscribe()","redis::subscription#unsubscribe()","redis#unwatch()","redis::distributed#unwatch()","redis::future#value()","redis#watch()","redis::distributed#watch()","redis#with_reconnect()","redis::client#with_reconnect()","redis::pipeline#with_reconnect()","redis::pipeline#with_reconnect?()","redis::client#with_socket_timeout()","redis#without_reconnect()","redis::client#without_reconnect()","redis::pipeline#without_reconnect()","redis::pipeline#without_reconnect?()","redis::client#without_socket_timeout()","redis::client#write()","redis::connection::hiredis#write()","redis::connection::ruby#write()","redis::connection::synchrony#write()","redis#zadd()","redis::distributed#zadd()","redis#zcard()","redis::distributed#zcard()","redis#zcount()","redis::distributed#zcount()","redis#zincrby()","redis::distributed#zincrby()","redis#zinterstore()","redis::distributed#zinterstore()","redis#zrange()","redis::distributed#zrange()","redis#zrangebyscore()","redis::distributed#zrangebyscore()","redis#zrank()","redis::distributed#zrank()","redis#zrem()","redis::distributed#zrem()","redis#zremrangebyrank()","redis::distributed#zremrangebyrank()","redis#zremrangebyscore()","redis::distributed#zremrangebyscore()","redis#zrevrange()","redis::distributed#zrevrange()","redis#zrevrangebyscore()","redis::distributed#zrevrangebyscore()","redis#zrevrank()","redis::distributed#zrevrank()","redis#zscore()","redis::distributed#zscore()","redis#zunionstore()","redis::distributed#zunionstore()"],"info":[["Redis","","Redis.html","",""],["Redis::BaseConnectionError","","Redis/BaseConnectionError.html","","<p>Base error for connection related errors.\n"],["Redis::BaseError","","Redis/BaseError.html","","<p>Base error for all redis-rb errors.\n"],["Redis::BasicObject","","Redis/BasicObject.html","",""],["Redis::CannotConnectError","","Redis/CannotConnectError.html","","<p>Raised when connection to a Redis server cannot be made.\n"],["Redis::Client","","Redis/Client.html","",""],["Redis::CommandError","","Redis/CommandError.html","","<p>Raised by the client when command execution returns an error reply.\n"],["Redis::Connection","","Redis/Connection.html","",""],["Redis::Connection::CommandHelper","","Redis/Connection/CommandHelper.html","",""],["Redis::Connection::Hiredis","","Redis/Connection/Hiredis.html","",""],["Redis::Connection::RedisClient","","Redis/Connection/RedisClient.html","",""],["Redis::Connection::Ruby","","Redis/Connection/Ruby.html","",""],["Redis::Connection::SocketMixin","","Redis/Connection/SocketMixin.html","",""],["Redis::Connection::Synchrony","","Redis/Connection/Synchrony.html","",""],["Redis::Connection::TCPSocket","","Redis/Connection/TCPSocket.html","",""],["Redis::Connection::UNIXSocket","","Redis/Connection/UNIXSocket.html","",""],["Redis::ConnectionError","","Redis/ConnectionError.html","","<p>Raised when connection to a Redis server is lost.\n"],["Redis::Distributed","","Redis/Distributed.html","",""],["Redis::Distributed::CannotDistribute","","Redis/Distributed/CannotDistribute.html","",""],["Redis::Future","","Redis/Future.html","",""],["Redis::FutureNotReady","","Redis/FutureNotReady.html","",""],["Redis::HashRing","","Redis/HashRing.html","",""],["Redis::InheritedError","","Redis/InheritedError.html","","<p>Raised when the connection was inherited by a child process.\n"],["Redis::Pipeline","","Redis/Pipeline.html","",""],["Redis::Pipeline::Multi","","Redis/Pipeline/Multi.html","",""],["Redis::ProtocolError","","Redis/ProtocolError.html","","<p>Raised by the connection when a protocol error occurs.\n"],["Redis::SubscribedClient","","Redis/SubscribedClient.html","",""],["Redis::Subscription","","Redis/Subscription.html","",""],["Redis::TimeoutError","","Redis/TimeoutError.html","","<p>Raised when performing I/O times out.\n"],["[]","Redis","Redis.html#method-i-5B-5D","(key)",""],["[]","Redis::Distributed","Redis/Distributed.html#method-i-5B-5D","(key)",""],["[]=","Redis","Redis.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Redis::Distributed","Redis/Distributed.html#method-i-5B-5D-3D","(key,value)",""],["_bpop","Redis","Redis.html#method-i-_bpop","(cmd, args)",""],["_bpop","Redis::Distributed","Redis/Distributed.html#method-i-_bpop","(cmd, args)",""],["_command","Redis::Future","Redis/Future.html#method-i-_command","()",""],["_eval","Redis","Redis.html#method-i-_eval","(cmd, args)",""],["_eval","Redis::Distributed","Redis/Distributed.html#method-i-_eval","(cmd, args)",""],["_parse_driver","Redis::Client","Redis/Client.html#method-i-_parse_driver","(driver)",""],["_parse_options","Redis::Client","Redis/Client.html#method-i-_parse_options","(options)",""],["_read_from_socket","Redis::Connection::SocketMixin","Redis/Connection/SocketMixin.html#method-i-_read_from_socket","(nbytes)",""],["_read_from_socket","Redis::Connection::UNIXSocket","Redis/Connection/UNIXSocket.html#method-i-_read_from_socket","(nbytes)","<p>JRuby raises Errno::EAGAIN on #read_nonblock even when IO.select says it is\nreadable (1.6.6, in both …\n"],["_set","Redis::Future","Redis/Future.html#method-i-_set","(object)",""],["add_node","Redis::Distributed","Redis/Distributed.html#method-i-add_node","(options)",""],["add_node","Redis::HashRing","Redis/HashRing.html#method-i-add_node","(node)","<p>Adds a `node` to the hash ring (including a number of replicas).\n"],["append","Redis","Redis.html#method-i-append","(key, value)","<p>Append a value to a key.\n<p>@param [String] key @param [String] value value to append @return [Fixnum]\nlength …\n"],["append","Redis::Distributed","Redis/Distributed.html#method-i-append","(key, value)","<p>Append a value to a key.\n"],["auth","Redis","Redis.html#method-i-auth","(password)","<p>Authenticate to the server.\n<p>@param [String] password must match the password specified in the\n\n<pre>`requirepass` ...</pre>\n"],["bgrewriteaof","Redis","Redis.html#method-i-bgrewriteaof","()","<p>Asynchronously rewrite the append-only file.\n<p>@return [String] `OK`\n"],["bgsave","Redis","Redis.html#method-i-bgsave","()","<p>Asynchronously save the dataset to disk.\n<p>@return [String] `OK`\n"],["bgsave","Redis::Distributed","Redis/Distributed.html#method-i-bgsave","()","<p>Asynchronously save the dataset to disk.\n"],["binary_search","Redis::HashRing","Redis/HashRing.html#method-c-binary_search","(ary, value, &block)","<p>Find the closest index in HashRing with value &lt;= the given value\n"],["bitcount","Redis","Redis.html#method-i-bitcount","(key, start = 0, stop = -1)","<p>Count the number of set bits in a range of the string value stored at key.\n<p>@param [String] key @param …\n"],["bitcount","Redis::Distributed","Redis/Distributed.html#method-i-bitcount","(key, start = 0, stop = -1)","<p>Count the number of set bits in a range of the string value stored at key.\n"],["bitop","Redis","Redis.html#method-i-bitop","(operation, destkey, *keys)","<p>Perform a bitwise operation between strings and store the resulting string\nin a key.\n<p>@param [String] operation …\n"],["bitop","Redis::Distributed","Redis/Distributed.html#method-i-bitop","(operation, destkey, *keys)","<p>Perform a bitwise operation between strings and store the resulting string\nin a key.\n"],["blpop","Redis","Redis.html#method-i-blpop","(*args)","<p>Remove and get the first element in a list, or block until one is\navailable.\n<p>@example With timeout\n\n<pre>list, ...</pre>\n"],["blpop","Redis::Distributed","Redis/Distributed.html#method-i-blpop","(*args)","<p>Remove and get the first element in a list, or block until one is\navailable.\n"],["brpop","Redis","Redis.html#method-i-brpop","(*args)","<p>Remove and get the last element in a list, or block until one is available.\n<p>@param [String, Array&lt;String&gt;] …\n"],["brpop","Redis::Distributed","Redis/Distributed.html#method-i-brpop","(*args)","<p>Remove and get the last element in a list, or block until one is available.\n"],["brpoplpush","Redis","Redis.html#method-i-brpoplpush","(source, destination, options = {})","<p>Pop a value from a list, push it to another list and return it; or block\nuntil one is available.\n<p>@param …\n"],["brpoplpush","Redis::Distributed","Redis/Distributed.html#method-i-brpoplpush","(source, destination, options = {})","<p>Pop a value from a list, push it to another list and return it; or block\nuntil one is available.\n"],["build_command","Redis::Connection::CommandHelper","Redis/Connection/CommandHelper.html#method-i-build_command","(args)",""],["call","Redis::Client","Redis/Client.html#method-i-call","(command, &block)",""],["call","Redis::Pipeline","Redis/Pipeline.html#method-i-call","(command, &block)",""],["call","Redis::SubscribedClient","Redis/SubscribedClient.html#method-i-call","(command)",""],["call_loop","Redis::Client","Redis/Client.html#method-i-call_loop","(command)",""],["call_pipeline","Redis::Client","Redis/Client.html#method-i-call_pipeline","(pipeline)",""],["call_pipeline","Redis::Pipeline","Redis/Pipeline.html#method-i-call_pipeline","(pipeline)",""],["call_pipelined","Redis::Client","Redis/Client.html#method-i-call_pipelined","(commands)",""],["call_with_timeout","Redis::Client","Redis/Client.html#method-i-call_with_timeout","(command, timeout, &blk)",""],["call_without_timeout","Redis::Client","Redis/Client.html#method-i-call_without_timeout","(command, &blk)",""],["commands","Redis::Pipeline","Redis/Pipeline.html#method-i-commands","()",""],["commands","Redis::Pipeline::Multi","Redis/Pipeline/Multi.html#method-i-commands","()",""],["config","Redis","Redis.html#method-i-config","(action, *args)","<p>Get or set server configuration parameters.\n<p>@param [String] action e.g. `get`, `set`, `resetstat` @return …\n"],["connect","Redis","Redis.html#method-c-connect","(options = {})","<p>@deprecated The preferred way to create a new client object is using\n`#new`.\n\n<pre>This method does not actually ...</pre>\n"],["connect","Redis::Client","Redis/Client.html#method-i-connect","()",""],["connect","Redis::Connection::Hiredis","Redis/Connection/Hiredis.html#method-c-connect","(config)",""],["connect","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-c-connect","(config)",""],["connect","Redis::Connection::Synchrony","Redis/Connection/Synchrony.html#method-c-connect","(config)",""],["connect","Redis::Connection::TCPSocket","Redis/Connection/TCPSocket.html#method-c-connect","(host, port, timeout)",""],["connect","Redis::Connection::UNIXSocket","Redis/Connection/UNIXSocket.html#method-c-connect","(path, timeout)",""],["connected?","Redis::Client","Redis/Client.html#method-i-connected-3F","()",""],["connected?","Redis::Connection::Hiredis","Redis/Connection/Hiredis.html#method-i-connected-3F","()",""],["connected?","Redis::Connection::RedisClient","Redis/Connection/RedisClient.html#method-i-connected-3F","()",""],["connected?","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-connected-3F","()",""],["connected?","Redis::Connection::Synchrony","Redis/Connection/Synchrony.html#method-i-connected-3F","()",""],["connection_completed","Redis::Connection::RedisClient","Redis/Connection/RedisClient.html#method-i-connection_completed","()",""],["current","Redis","Redis.html#method-c-current","()",""],["current=","Redis","Redis.html#method-c-current-3D","(redis)",""],["db","Redis::Client","Redis/Client.html#method-i-db","()",""],["db=","Redis::Client","Redis/Client.html#method-i-db-3D","(db)",""],["dbsize","Redis","Redis.html#method-i-dbsize","()","<p>Return the number of keys in the selected database.\n<p>@return [Fixnum]\n"],["dbsize","Redis::Distributed","Redis/Distributed.html#method-i-dbsize","()","<p>Return the number of keys in the selected database.\n"],["debug","Redis","Redis.html#method-i-debug","(*args)",""],["decr","Redis","Redis.html#method-i-decr","(key)","<p>Decrement the integer value of a key by one.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">decr</span>(<span class=\"ruby-string\">&quot;value&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; 4</span>\n</pre>\n"],["decr","Redis::Distributed","Redis/Distributed.html#method-i-decr","(key)","<p>Decrement the integer value of a key by one.\n"],["decrby","Redis","Redis.html#method-i-decrby","(key, decrement)","<p>Decrement the integer value of a key by the given number.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">decrby</span>(<span class=\"ruby-string\">&quot;value&quot;</span>, <span class=\"ruby-value\">5</span>)\n  <span class=\"ruby-comment\"># =&gt; 0</span>\n</pre>\n"],["decrby","Redis::Distributed","Redis/Distributed.html#method-i-decrby","(key, decrement)","<p>Decrement the integer value of a key by the given number.\n"],["del","Redis","Redis.html#method-i-del","(*keys)","<p>Delete one or more keys.\n<p>@param [String, Array&lt;String&gt;] keys @return [Fixnum] number of keys\nthat …\n"],["del","Redis::Distributed","Redis/Distributed.html#method-i-del","(*args)","<p>Delete a key.\n"],["deprecate","Redis","Redis.html#method-c-deprecate","(message, trace = caller[0])",""],["discard","Redis","Redis.html#method-i-discard","()","<p>Discard all commands issued after MULTI.\n<p>Only call this method when `#multi` was called *<strong>without</strong>* a\nblock. …\n"],["discard","Redis::Distributed","Redis/Distributed.html#method-i-discard","()","<p>Discard all commands issued after MULTI.\n"],["disconnect","Redis::Client","Redis/Client.html#method-i-disconnect","()",""],["disconnect","Redis::Connection::Hiredis","Redis/Connection/Hiredis.html#method-i-disconnect","()",""],["disconnect","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-disconnect","()",""],["disconnect","Redis::Connection::Synchrony","Redis/Connection/Synchrony.html#method-i-disconnect","()",""],["drivers","Redis::Connection","Redis/Connection.html#method-c-drivers","()","<p>Store a list of loaded connection drivers in the Connection module.\nRedis::Client uses the last required …\n"],["dump","Redis","Redis.html#method-i-dump","(key)","<p>Return a serialized version of the value stored at a key.\n<p>@param [String] key @return [String] serialized_value …\n"],["dump","Redis::Distributed","Redis/Distributed.html#method-i-dump","(key)","<p>Return a serialized version of the value stored at a key.\n"],["echo","Redis","Redis.html#method-i-echo","(value)","<p>Echo the given string.\n<p>@param [String] value @return [String]\n"],["echo","Redis::Distributed","Redis/Distributed.html#method-i-echo","(value)","<p>Echo the given string.\n"],["encode","Redis::Connection::CommandHelper","Redis/Connection/CommandHelper.html#method-i-encode","(string)",""],["ensure_connected","Redis::Client","Redis/Client.html#method-i-ensure_connected","()",""],["ensure_same_node","Redis::Distributed","Redis/Distributed.html#method-i-ensure_same_node","(command, keys)",""],["establish_connection","Redis::Client","Redis/Client.html#method-i-establish_connection","()",""],["eval","Redis","Redis.html#method-i-eval","(*args)","<p>Evaluate Lua script.\n<p>@example EVAL without KEYS nor ARGV\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-string\">&quot;return 1&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; 1</span>\n</pre>\n"],["eval","Redis::Distributed","Redis/Distributed.html#method-i-eval","(*args)","<p>Evaluate Lua script.\n"],["evalsha","Redis","Redis.html#method-i-evalsha","(*args)","<p>Evaluate Lua script by its SHA.\n<p>@example EVALSHA without KEYS nor ARGV\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">evalsha</span>(<span class=\"ruby-identifier\">sha</span>)\n  <span class=\"ruby-comment\"># =&gt; &lt;depends ...</span>\n</pre>\n"],["evalsha","Redis::Distributed","Redis/Distributed.html#method-i-evalsha","(*args)","<p>Evaluate Lua script by its SHA.\n"],["exec","Redis","Redis.html#method-i-exec","()","<p>Execute all commands issued after MULTI.\n<p>Only call this method when `#multi` was called *<strong>without</strong>* a\nblock. …\n"],["exec","Redis::Distributed","Redis/Distributed.html#method-i-exec","()","<p>Execute all commands issued after MULTI.\n"],["exists","Redis","Redis.html#method-i-exists","(key)","<p>Determine if a key exists.\n<p>@param [String] key @return [Boolean]\n"],["exists","Redis::Distributed","Redis/Distributed.html#method-i-exists","(key)","<p>Determine if a key exists.\n"],["expire","Redis","Redis.html#method-i-expire","(key, seconds)","<p>Set a key’s time to live in seconds.\n<p>@param [String] key @param [Fixnum] seconds time to live @return …\n"],["expire","Redis::Distributed","Redis/Distributed.html#method-i-expire","(key, seconds)","<p>Set a key’s time to live in seconds.\n"],["expireat","Redis","Redis.html#method-i-expireat","(key, unix_time)","<p>Set the expiration for a key as a UNIX timestamp.\n<p>@param [String] key @param [Fixnum] unix_time expiry …\n"],["expireat","Redis::Distributed","Redis/Distributed.html#method-i-expireat","(key, unix_time)","<p>Set the expiration for a key as a UNIX timestamp.\n"],["finish","Redis::Pipeline","Redis/Pipeline.html#method-i-finish","(replies, &blk)",""],["finish","Redis::Pipeline::Multi","Redis/Pipeline/Multi.html#method-i-finish","(replies)",""],["flushall","Redis","Redis.html#method-i-flushall","()","<p>Remove all keys from all databases.\n<p>@return [String] `OK`\n"],["flushall","Redis::Distributed","Redis/Distributed.html#method-i-flushall","()","<p>Remove all keys from all databases.\n"],["flushdb","Redis","Redis.html#method-i-flushdb","()","<p>Remove all keys from the current database.\n<p>@return [String] `OK`\n"],["flushdb","Redis::Distributed","Redis/Distributed.html#method-i-flushdb","()","<p>Remove all keys from the current database.\n"],["format_bulk_reply","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-format_bulk_reply","(line)",""],["format_error_reply","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-format_error_reply","(line)",""],["format_integer_reply","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-format_integer_reply","(line)",""],["format_multi_bulk_reply","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-format_multi_bulk_reply","(line)",""],["format_reply","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-format_reply","(reply_type, line)",""],["format_status_reply","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-format_status_reply","(line)",""],["get","Redis","Redis.html#method-i-get","(key)","<p>Get the value of a key.\n<p>@param [String] key @return [String]\n"],["get","Redis::Distributed","Redis/Distributed.html#method-i-get","(key)","<p>Get the value of a key.\n"],["get_node","Redis::HashRing","Redis/HashRing.html#method-i-get_node","(key)","<p>get the node in the hash ring for this key\n"],["get_node_pos","Redis::HashRing","Redis/HashRing.html#method-i-get_node_pos","(key)",""],["get_tcp_keepalive","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-get_tcp_keepalive","()",""],["getbit","Redis","Redis.html#method-i-getbit","(key, offset)","<p>Returns the bit value at offset in the string value stored at key.\n<p>@param [String] key @param [Fixnum] …\n"],["getbit","Redis::Distributed","Redis/Distributed.html#method-i-getbit","(key, offset)","<p>Returns the bit value at offset in the string value stored at key.\n"],["getrange","Redis","Redis.html#method-i-getrange","(key, start, stop)","<p>Get a substring of the string stored at a key.\n<p>@param [String] key @param [Fixnum] start zero-based start …\n"],["getrange","Redis::Distributed","Redis/Distributed.html#method-i-getrange","(key, start, stop)","<p>Get a substring of the string stored at a key.\n"],["gets","Redis::Connection::SocketMixin","Redis/Connection/SocketMixin.html#method-i-gets","()",""],["getset","Redis","Redis.html#method-i-getset","(key, value)","<p>Set the string value of a key and return its old value.\n<p>@param [String] key @param [String] value value …\n"],["getset","Redis::Distributed","Redis/Distributed.html#method-i-getset","(key, value)","<p>Set the string value of a key and return its old value.\n"],["hdel","Redis","Redis.html#method-i-hdel","(key, field)","<p>Delete one or more hash fields.\n<p>@param [String] key @param [String, Array&lt;String&gt;] field @return …\n"],["hdel","Redis::Distributed","Redis/Distributed.html#method-i-hdel","(key, field)","<p>Delete one or more hash fields.\n"],["hexists","Redis","Redis.html#method-i-hexists","(key, field)","<p>Determine if a hash field exists.\n<p>@param [String] key @param [String] field @return [Boolean] whether …\n"],["hexists","Redis::Distributed","Redis/Distributed.html#method-i-hexists","(key, field)","<p>Determine if a hash field exists.\n"],["hget","Redis","Redis.html#method-i-hget","(key, field)","<p>Get the value of a hash field.\n<p>@param [String] key @param [String] field @return [String]\n"],["hget","Redis::Distributed","Redis/Distributed.html#method-i-hget","(key, field)","<p>Get the value of a hash field.\n"],["hgetall","Redis","Redis.html#method-i-hgetall","(key)","<p>Get all the fields and values in a hash.\n<p>@param [String] key @return [Hash&lt;String, String&gt;]\n"],["hgetall","Redis::Distributed","Redis/Distributed.html#method-i-hgetall","(key)","<p>Get all the fields and values in a hash.\n"],["hincrby","Redis","Redis.html#method-i-hincrby","(key, field, increment)","<p>Increment the integer value of a hash field by the given integer number.\n<p>@param [String] key @param [String] …\n"],["hincrby","Redis::Distributed","Redis/Distributed.html#method-i-hincrby","(key, field, increment)","<p>Increment the integer value of a hash field by the given integer number.\n"],["hincrbyfloat","Redis","Redis.html#method-i-hincrbyfloat","(key, field, increment)","<p>Increment the numeric value of a hash field by the given float number.\n<p>@param [String] key @param [String] …\n"],["hincrbyfloat","Redis::Distributed","Redis/Distributed.html#method-i-hincrbyfloat","(key, field, increment)","<p>Increment the numeric value of a hash field by the given float number.\n"],["hkeys","Redis","Redis.html#method-i-hkeys","(key)","<p>Get all the fields in a hash.\n<p>@param [String] key @return [Array&lt;String&gt;]\n"],["hkeys","Redis::Distributed","Redis/Distributed.html#method-i-hkeys","(key)","<p>Get all the fields in a hash.\n"],["hlen","Redis","Redis.html#method-i-hlen","(key)","<p>Get the number of fields in a hash.\n<p>@param [String] key @return [Fixnum] number of fields in the hash …\n"],["hlen","Redis::Distributed","Redis/Distributed.html#method-i-hlen","(key)","<p>Get the number of fields in a hash.\n"],["hmget","Redis","Redis.html#method-i-hmget","(key, *fields, &blk)","<p>Get the values of all the given hash fields.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">hmget</span>(<span class=\"ruby-string\">&quot;hash&quot;</span>, <span class=\"ruby-string\">&quot;f1&quot;</span>, <span class=\"ruby-string\">&quot;f2&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; [&quot;v1&quot;, &quot;v2&quot;]</span>\n</pre>\n"],["hmget","Redis::Distributed","Redis/Distributed.html#method-i-hmget","(key, *fields)","<p>Get the values of all the given hash fields.\n"],["hmset","Redis","Redis.html#method-i-hmset","(key, *attrs)","<p>Set one or more hash values.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">hmset</span>(<span class=\"ruby-string\">&quot;hash&quot;</span>, <span class=\"ruby-string\">&quot;f1&quot;</span>, <span class=\"ruby-string\">&quot;v1&quot;</span>, <span class=\"ruby-string\">&quot;f2&quot;</span>, <span class=\"ruby-string\">&quot;v2&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; &quot;OK&quot;</span>\n</pre>\n"],["hmset","Redis::Distributed","Redis/Distributed.html#method-i-hmset","(key, *attrs)","<p>Set multiple hash fields to multiple values.\n"],["host","Redis::Client","Redis/Client.html#method-i-host","()",""],["hset","Redis","Redis.html#method-i-hset","(key, field, value)","<p>Set the string value of a hash field.\n<p>@param [String] key @param [String] field @param [String] value …\n"],["hset","Redis::Distributed","Redis/Distributed.html#method-i-hset","(key, field, value)","<p>Set the string value of a hash field.\n"],["hsetnx","Redis","Redis.html#method-i-hsetnx","(key, field, value)","<p>Set the value of a hash field, only if the field does not exist.\n<p>@param [String] key @param [String] field …\n"],["hsetnx","Redis::Distributed","Redis/Distributed.html#method-i-hsetnx","(key, field, value)","<p>Set the value of a hash field, only if the field does not exist.\n"],["hvals","Redis","Redis.html#method-i-hvals","(key)","<p>Get all the values in a hash.\n<p>@param [String] key @return [Array&lt;String&gt;]\n"],["hvals","Redis::Distributed","Redis/Distributed.html#method-i-hvals","(key)","<p>Get all the values in a hash.\n"],["id","Redis","Redis.html#method-i-id","()",""],["id","Redis::Client","Redis/Client.html#method-i-id","()",""],["incr","Redis","Redis.html#method-i-incr","(key)","<p>Increment the integer value of a key by one.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">incr</span>(<span class=\"ruby-string\">&quot;value&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; 6</span>\n</pre>\n"],["incr","Redis::Distributed","Redis/Distributed.html#method-i-incr","(key)","<p>Increment the integer value of a key by one.\n"],["incrby","Redis","Redis.html#method-i-incrby","(key, increment)","<p>Increment the integer value of a key by the given integer number.\n<p>@example\n\n<pre>redis.incrby(&quot;value&quot;, 5)\n  # ...</pre>\n"],["incrby","Redis::Distributed","Redis/Distributed.html#method-i-incrby","(key, increment)","<p>Increment the integer value of a key by the given integer number.\n"],["incrbyfloat","Redis","Redis.html#method-i-incrbyfloat","(key, increment)","<p>Increment the numeric value of a key by the given float number.\n<p>@example\n\n<pre>redis.incrbyfloat(&quot;value&quot;, 1.23) ...</pre>\n"],["incrbyfloat","Redis::Distributed","Redis/Distributed.html#method-i-incrbyfloat","(key, increment)","<p>Increment the numeric value of a key by the given float number.\n"],["info","Redis","Redis.html#method-i-info","(cmd = nil)","<p>Get information and statistics about the server.\n<p>@param [String, Symbol] cmd e.g. “commandstats” …\n"],["info","Redis::Distributed","Redis/Distributed.html#method-i-info","(cmd = nil)","<p>Get information and statistics about the server.\n"],["inspect","Redis","Redis.html#method-i-inspect","()",""],["inspect","Redis::Distributed","Redis/Distributed.html#method-i-inspect","()",""],["inspect","Redis::Future","Redis/Future.html#method-i-inspect","()",""],["io","Redis::Client","Redis/Client.html#method-i-io","()",""],["iter_nodes","Redis::HashRing","Redis/HashRing.html#method-i-iter_nodes","(key)",""],["key_tag","Redis::Distributed","Redis/Distributed.html#method-i-key_tag","(key)",""],["keys","Redis","Redis.html#method-i-keys","(pattern = \"*\")","<p>Find all keys matching the given pattern.\n<p>@param [String] pattern @return [Array&lt;String&gt;]\n"],["keys","Redis::Distributed","Redis/Distributed.html#method-i-keys","(glob = \"*\")","<p>Find all keys matching the given pattern.\n"],["lastsave","Redis","Redis.html#method-i-lastsave","()","<p>Get the UNIX time stamp of the last successful save to disk.\n<p>@return [Fixnum]\n"],["lastsave","Redis::Distributed","Redis/Distributed.html#method-i-lastsave","()","<p>Get the UNIX time stamp of the last successful save to disk.\n"],["lindex","Redis","Redis.html#method-i-lindex","(key, index)","<p>Get an element from a list by its index.\n<p>@param [String] key @param [Fixnum] index @return [String]\n"],["lindex","Redis::Distributed","Redis/Distributed.html#method-i-lindex","(key, index)","<p>Get an element from a list by its index.\n"],["linsert","Redis","Redis.html#method-i-linsert","(key, where, pivot, value)","<p>Insert an element before or after another element in a list.\n<p>@param [String] key @param [String, Symbol] …\n"],["linsert","Redis::Distributed","Redis/Distributed.html#method-i-linsert","(key, where, pivot, value)","<p>Insert an element before or after another element in a list.\n"],["llen","Redis","Redis.html#method-i-llen","(key)","<p>Get the length of a list.\n<p>@param [String] key @return [Fixnum]\n"],["llen","Redis::Distributed","Redis/Distributed.html#method-i-llen","(key)","<p>Get the length of a list.\n"],["location","Redis::Client","Redis/Client.html#method-i-location","()",""],["logging","Redis::Client","Redis/Client.html#method-i-logging","(commands)",""],["lpop","Redis","Redis.html#method-i-lpop","(key)","<p>Remove and get the first element in a list.\n<p>@param [String] key @return [String]\n"],["lpop","Redis::Distributed","Redis/Distributed.html#method-i-lpop","(key)","<p>Remove and get the first element in a list.\n"],["lpush","Redis","Redis.html#method-i-lpush","(key, value)","<p>Prepend one or more values to a list, creating the list if it doesn’t exist\n<p>@param [String] key @param …\n"],["lpush","Redis::Distributed","Redis/Distributed.html#method-i-lpush","(key, value)","<p>Prepend one or more values to a list.\n"],["lpushx","Redis","Redis.html#method-i-lpushx","(key, value)","<p>Prepend a value to a list, only if the list exists.\n<p>@param [String] key @param [String] value @return …\n"],["lpushx","Redis::Distributed","Redis/Distributed.html#method-i-lpushx","(key, value)","<p>Prepend a value to a list, only if the list exists.\n"],["lrange","Redis","Redis.html#method-i-lrange","(key, start, stop)","<p>Get a range of elements from a list.\n<p>@param [String] key @param [Fixnum] start start index @param [Fixnum] …\n"],["lrange","Redis::Distributed","Redis/Distributed.html#method-i-lrange","(key, start, stop)","<p>Get a range of elements from a list.\n"],["lrem","Redis","Redis.html#method-i-lrem","(key, count, value)","<p>Remove elements from a list.\n<p>@param [String] key @param [Fixnum] count number of elements to remove.  …\n"],["lrem","Redis::Distributed","Redis/Distributed.html#method-i-lrem","(key, count, value)","<p>Remove elements from a list.\n"],["lset","Redis","Redis.html#method-i-lset","(key, index, value)","<p>Set the value of an element in a list by its index.\n<p>@param [String] key @param [Fixnum] index @param [String] …\n"],["lset","Redis::Distributed","Redis/Distributed.html#method-i-lset","(key, index, value)","<p>Set the value of an element in a list by its index.\n"],["ltrim","Redis","Redis.html#method-i-ltrim","(key, start, stop)","<p>Trim a list to the specified range.\n<p>@param [String] key @param [Fixnum] start start index @param [Fixnum] …\n"],["ltrim","Redis::Distributed","Redis/Distributed.html#method-i-ltrim","(key, start, stop)","<p>Trim a list to the specified range.\n"],["mapped_hmget","Redis","Redis.html#method-i-mapped_hmget","(key, *fields)","<p>Get the values of all the given hash fields.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">hmget</span>(<span class=\"ruby-string\">&quot;hash&quot;</span>, <span class=\"ruby-string\">&quot;f1&quot;</span>, <span class=\"ruby-string\">&quot;f2&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; { &quot;f1&quot; =&gt; ...</span>\n</pre>\n"],["mapped_hmget","Redis::Distributed","Redis/Distributed.html#method-i-mapped_hmget","(key, *fields)",""],["mapped_hmset","Redis","Redis.html#method-i-mapped_hmset","(key, hash)","<p>Set one or more hash values.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">mapped_hmset</span>(<span class=\"ruby-string\">&quot;hash&quot;</span>, { <span class=\"ruby-string\">&quot;f1&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;v1&quot;</span>, <span class=\"ruby-string\">&quot;f2&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;v2&quot;</span> })\n  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["mapped_hmset","Redis::Distributed","Redis/Distributed.html#method-i-mapped_hmset","(key, hash)",""],["mapped_mget","Redis","Redis.html#method-i-mapped_mget","(*keys)","<p>Get the values of all the given keys.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">mapped_mget</span>(<span class=\"ruby-string\">&quot;key1&quot;</span>, <span class=\"ruby-string\">&quot;key1&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; { &quot;key1&quot; =&gt; &quot;v1&quot;, ...</span>\n</pre>\n"],["mapped_mget","Redis::Distributed","Redis/Distributed.html#method-i-mapped_mget","(*keys)",""],["mapped_mset","Redis","Redis.html#method-i-mapped_mset","(hash)","<p>Set one or more values.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">mapped_mset</span>({ <span class=\"ruby-string\">&quot;f1&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;v1&quot;</span>, <span class=\"ruby-string\">&quot;f2&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;v2&quot;</span> })\n  <span class=\"ruby-comment\"># =&gt; &quot;OK&quot;</span>\n</pre>\n"],["mapped_mset","Redis::Distributed","Redis/Distributed.html#method-i-mapped_mset","(hash)",""],["mapped_msetnx","Redis","Redis.html#method-i-mapped_msetnx","(hash)","<p>Set one or more values, only if none of the keys exist.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">msetnx</span>({ <span class=\"ruby-string\">&quot;key1&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;v1&quot;</span>, <span class=\"ruby-string\">&quot;key2&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mapped_msetnx","Redis::Distributed","Redis/Distributed.html#method-i-mapped_msetnx","(hash)",""],["message","Redis::Distributed::CannotDistribute","Redis/Distributed/CannotDistribute.html#method-i-message","()",""],["message","Redis::Subscription","Redis/Subscription.html#method-i-message","(&block)",""],["method_missing","Redis","Redis.html#method-i-method_missing","(command, *args)",""],["mget","Redis","Redis.html#method-i-mget","(*keys, &blk)","<p>Get the values of all the given keys.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">mget</span>(<span class=\"ruby-string\">&quot;key1&quot;</span>, <span class=\"ruby-string\">&quot;key1&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; [&quot;v1&quot;, &quot;v2&quot;]</span>\n</pre>\n"],["mget","Redis::Distributed","Redis/Distributed.html#method-i-mget","(*keys)","<p>Get the values of all the given keys.\n"],["monitor","Redis","Redis.html#method-i-monitor","(&block)","<p>Listen for all requests received by the server in real time.\n<p>There is no way to interrupt this command. …\n"],["monitor","Redis::Distributed","Redis/Distributed.html#method-i-monitor","()","<p>Listen for all requests received by the server in real time.\n"],["move","Redis","Redis.html#method-i-move","(key, db)","<p>Move a key to another database.\n<p>@example Move a key to another database\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">set</span> <span class=\"ruby-string\">&quot;foo&quot;</span>, <span class=\"ruby-string\">&quot;bar&quot;</span>\n  <span class=\"ruby-comment\"># =&gt; &quot;OK&quot; ...</span>\n</pre>\n"],["move","Redis::Distributed","Redis/Distributed.html#method-i-move","(key, db)","<p>Move a key to another database.\n"],["mset","Redis","Redis.html#method-i-mset","(*args)","<p>Set one or more values.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">mset</span>(<span class=\"ruby-string\">&quot;key1&quot;</span>, <span class=\"ruby-string\">&quot;v1&quot;</span>, <span class=\"ruby-string\">&quot;key2&quot;</span>, <span class=\"ruby-string\">&quot;v2&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; &quot;OK&quot;</span>\n</pre>\n"],["mset","Redis::Distributed","Redis/Distributed.html#method-i-mset","(*args)","<p>Set multiple keys to multiple values.\n"],["msetnx","Redis","Redis.html#method-i-msetnx","(*args)","<p>Set one or more values, only if none of the keys exist.\n<p>@example\n\n<pre>redis.msetnx(&quot;key1&quot;, &quot;v1&quot;, &quot;key2&quot;, &quot;v2&quot;) ...</pre>\n"],["msetnx","Redis::Distributed","Redis/Distributed.html#method-i-msetnx","(*args)","<p>Set multiple keys to multiple values, only if none of the keys exist.\n"],["multi","Redis","Redis.html#method-i-multi","()","<p>Mark the start of a transaction block.\n<p>Passing a block is optional.\n<p>@example With a block\n"],["multi","Redis::Distributed","Redis/Distributed.html#method-i-multi","()","<p>Mark the start of a transaction block.\n"],["new","Redis","Redis.html#method-c-new","(options = {})",""],["new","Redis::Client","Redis/Client.html#method-c-new","(options = {})",""],["new","Redis::Connection::Hiredis","Redis/Connection/Hiredis.html#method-c-new","(connection)",""],["new","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-c-new","(sock)",""],["new","Redis::Connection::SocketMixin","Redis/Connection/SocketMixin.html#method-c-new","(*args)",""],["new","Redis::Connection::Synchrony","Redis/Connection/Synchrony.html#method-c-new","(connection)",""],["new","Redis::Distributed","Redis/Distributed.html#method-c-new","(node_configs, options = {})",""],["new","Redis::Distributed::CannotDistribute","Redis/Distributed/CannotDistribute.html#method-c-new","(command)",""],["new","Redis::Future","Redis/Future.html#method-c-new","(command, transformation)",""],["new","Redis::FutureNotReady","Redis/FutureNotReady.html#method-c-new","()",""],["new","Redis::HashRing","Redis/HashRing.html#method-c-new","(nodes=[], replicas=POINTS_PER_SERVER)","<p>nodes is a list of objects that have a proper to_s representation. replicas\nindicates how many virtual …\n"],["new","Redis::Pipeline","Redis/Pipeline.html#method-c-new","()",""],["new","Redis::ProtocolError","Redis/ProtocolError.html#method-c-new","(reply_type)",""],["new","Redis::SubscribedClient","Redis/SubscribedClient.html#method-c-new","(client)",""],["new","Redis::Subscription","Redis/Subscription.html#method-c-new","()",""],["node_for","Redis::Distributed","Redis/Distributed.html#method-i-node_for","(key)",""],["node_index_for","Redis::Distributed","Redis/Distributed.html#method-i-node_index_for","(key)",""],["nodes","Redis::Distributed","Redis/Distributed.html#method-i-nodes","()",""],["object","Redis","Redis.html#method-i-object","(*args)",""],["on_each_node","Redis::Distributed","Redis/Distributed.html#method-i-on_each_node","(command, *args)",""],["password","Redis::Client","Redis/Client.html#method-i-password","()",""],["path","Redis::Client","Redis/Client.html#method-i-path","()",""],["persist","Redis","Redis.html#method-i-persist","(key)","<p>Remove the expiration from a key.\n<p>@param [String] key @return [Boolean] whether the timeout was removed …\n"],["persist","Redis::Distributed","Redis/Distributed.html#method-i-persist","(key)","<p>Remove the expiration from a key.\n"],["pexpire","Redis","Redis.html#method-i-pexpire","(key, milliseconds)","<p>Set a key’s time to live in milliseconds.\n<p>@param [String] key @param [Fixnum] milliseconds time to live …\n"],["pexpire","Redis::Distributed","Redis/Distributed.html#method-i-pexpire","(key, milliseconds)","<p>Set a key’s time to live in milliseconds.\n"],["pexpireat","Redis","Redis.html#method-i-pexpireat","(key, ms_unix_time)","<p>Set the expiration for a key as number of milliseconds from UNIX Epoch.\n<p>@param [String] key @param [Fixnum] …\n"],["pexpireat","Redis::Distributed","Redis/Distributed.html#method-i-pexpireat","(key, ms_unix_time)","<p>Set the expiration for a key as number of milliseconds from UNIX Epoch.\n"],["ping","Redis","Redis.html#method-i-ping","()","<p>Ping the server.\n<p>@return [String] `PONG`\n"],["ping","Redis::Distributed","Redis/Distributed.html#method-i-ping","()","<p>Ping the server.\n"],["pipelined","Redis","Redis.html#method-i-pipelined","()",""],["pipelined","Redis::Distributed","Redis/Distributed.html#method-i-pipelined","()",""],["pmessage","Redis::Subscription","Redis/Subscription.html#method-i-pmessage","(&block)",""],["port","Redis::Client","Redis/Client.html#method-i-port","()",""],["post_init","Redis::Connection::RedisClient","Redis/Connection/RedisClient.html#method-i-post_init","()",""],["process","Redis::Client","Redis/Client.html#method-i-process","(commands)",""],["psetex","Redis","Redis.html#method-i-psetex","(key, ttl, value)","<p>Set the time to live in milliseconds of a key.\n<p>@param [String] key @param [Fixnum] ttl @param [String] …\n"],["psetex","Redis::Distributed","Redis/Distributed.html#method-i-psetex","(key, ttl, value)","<p>Set the time to live in milliseconds of a key.\n"],["psubscribe","Redis","Redis.html#method-i-psubscribe","(*channels, &block)","<p>Listen for messages published to channels matching the given patterns.\n"],["psubscribe","Redis::Distributed","Redis/Distributed.html#method-i-psubscribe","(*channels, &block)","<p>Listen for messages published to channels matching the given patterns.\n"],["psubscribe","Redis::SubscribedClient","Redis/SubscribedClient.html#method-i-psubscribe","(*channels, &block)",""],["psubscribe","Redis::Subscription","Redis/Subscription.html#method-i-psubscribe","(&block)",""],["pttl","Redis","Redis.html#method-i-pttl","(key)","<p>Get the time to live (in milliseconds) for a key.\n<p>@param [String] key @return [Fixnum] remaining time …\n"],["pttl","Redis::Distributed","Redis/Distributed.html#method-i-pttl","(key)","<p>Get the time to live (in milliseconds) for a key.\n"],["publish","Redis","Redis.html#method-i-publish","(channel, message)","<p>Post a message to a channel.\n"],["publish","Redis::Distributed","Redis/Distributed.html#method-i-publish","(channel, message)","<p>Post a message to a channel.\n"],["punsubscribe","Redis","Redis.html#method-i-punsubscribe","(*channels)","<p>Stop listening for messages posted to channels matching the given patterns.\n"],["punsubscribe","Redis::Distributed","Redis/Distributed.html#method-i-punsubscribe","(*channels)","<p>Stop listening for messages posted to channels matching the given patterns.\n"],["punsubscribe","Redis::SubscribedClient","Redis/SubscribedClient.html#method-i-punsubscribe","(*channels)",""],["punsubscribe","Redis::Subscription","Redis/Subscription.html#method-i-punsubscribe","(&block)",""],["quit","Redis","Redis.html#method-i-quit","()","<p>Close the connection.\n<p>@return [String] `OK`\n"],["quit","Redis::Distributed","Redis/Distributed.html#method-i-quit","()","<p>Close the connection.\n"],["randomkey","Redis","Redis.html#method-i-randomkey","()","<p>Return a random key from the keyspace.\n<p>@return [String]\n"],["randomkey","Redis::Distributed","Redis/Distributed.html#method-i-randomkey","()","<p>Return a random key from the keyspace.\n"],["read","Redis::Client","Redis/Client.html#method-i-read","()",""],["read","Redis::Connection::Hiredis","Redis/Connection/Hiredis.html#method-i-read","()",""],["read","Redis::Connection::RedisClient","Redis/Connection/RedisClient.html#method-i-read","()",""],["read","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-read","()",""],["read","Redis::Connection::SocketMixin","Redis/Connection/SocketMixin.html#method-i-read","(nbytes)",""],["read","Redis::Connection::Synchrony","Redis/Connection/Synchrony.html#method-i-read","()",""],["receive_data","Redis::Connection::RedisClient","Redis/Connection/RedisClient.html#method-i-receive_data","(data)",""],["reconnect","Redis::Client","Redis/Client.html#method-i-reconnect","()",""],["remove_node","Redis::HashRing","Redis/HashRing.html#method-i-remove_node","(node)",""],["rename","Redis","Redis.html#method-i-rename","(old_name, new_name)","<p>Rename a key. If the new key already exists it is overwritten.\n<p>@param [String] old_name @param [String] …\n"],["rename","Redis::Distributed","Redis/Distributed.html#method-i-rename","(old_name, new_name)","<p>Rename a key.\n"],["renamenx","Redis","Redis.html#method-i-renamenx","(old_name, new_name)","<p>Rename a key, only if the new key does not exist.\n<p>@param [String] old_name @param [String] new_name @return …\n"],["renamenx","Redis::Distributed","Redis/Distributed.html#method-i-renamenx","(old_name, new_name)","<p>Rename a key, only if the new key does not exist.\n"],["restore","Redis","Redis.html#method-i-restore","(key, ttl, serialized_value)","<p>Create a key using the serialized value, previously obtained using DUMP.\n<p>@param [String] key @param [String] …\n"],["restore","Redis::Distributed","Redis/Distributed.html#method-i-restore","(key, ttl, serialized_value)","<p>Create a key using the serialized value, previously obtained using DUMP.\n"],["rpop","Redis","Redis.html#method-i-rpop","(key)","<p>Remove and get the last element in a list.\n<p>@param [String] key @return [String]\n"],["rpop","Redis::Distributed","Redis/Distributed.html#method-i-rpop","(key)","<p>Remove and get the last element in a list.\n"],["rpoplpush","Redis","Redis.html#method-i-rpoplpush","(source, destination)","<p>Remove the last element in a list, append it to another list and return it.\n<p>@param [String] source source …\n"],["rpoplpush","Redis::Distributed","Redis/Distributed.html#method-i-rpoplpush","(source, destination)","<p>Remove the last element in a list, append it to another list and return it.\n"],["rpush","Redis","Redis.html#method-i-rpush","(key, value)","<p>Append one or more values to a list, creating the list if it doesn’t exist\n<p>@param [String] key @param …\n"],["rpush","Redis::Distributed","Redis/Distributed.html#method-i-rpush","(key, value)","<p>Append one or more values to a list.\n"],["rpushx","Redis","Redis.html#method-i-rpushx","(key, value)","<p>Append a value to a list, only if the list exists.\n<p>@param [String] key @param [String] value @return [Fixnum] …\n"],["rpushx","Redis::Distributed","Redis/Distributed.html#method-i-rpushx","(key, value)","<p>Append a value to a list, only if the list exists.\n"],["sadd","Redis","Redis.html#method-i-sadd","(key, member)","<p>Add one or more members to a set.\n<p>@param [String] key @param [String, Array&lt;String&gt;] member one …\n"],["sadd","Redis::Distributed","Redis/Distributed.html#method-i-sadd","(key, member)","<p>Add one or more members to a set.\n"],["save","Redis","Redis.html#method-i-save","()","<p>Synchronously save the dataset to disk.\n<p>@return [String]\n"],["save","Redis::Distributed","Redis/Distributed.html#method-i-save","()","<p>Synchronously save the dataset to disk.\n"],["scard","Redis","Redis.html#method-i-scard","(key)","<p>Get the number of members in a set.\n<p>@param [String] key @return [Fixnum]\n"],["scard","Redis::Distributed","Redis/Distributed.html#method-i-scard","(key)","<p>Get the number of members in a set.\n"],["scheme","Redis::Client","Redis/Client.html#method-i-scheme","()",""],["script","Redis","Redis.html#method-i-script","(subcommand, *args)","<p>Control remote script registry.\n<p>@example Load a script\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sha</span> = <span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">script</span>(:<span class=\"ruby-identifier\">load</span>, <span class=\"ruby-string\">&quot;return 1&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; &lt;sha ...</span>\n</pre>\n"],["script","Redis::Distributed","Redis/Distributed.html#method-i-script","(subcommand, *args)","<p>Control remote script registry.\n"],["sdiff","Redis","Redis.html#method-i-sdiff","(*keys)","<p>Subtract multiple sets.\n<p>@param [String, Array&lt;String&gt;] keys keys pointing to sets to subtract\n@return …\n"],["sdiff","Redis::Distributed","Redis/Distributed.html#method-i-sdiff","(*keys)","<p>Subtract multiple sets.\n"],["sdiffstore","Redis","Redis.html#method-i-sdiffstore","(destination, *keys)","<p>Subtract multiple sets and store the resulting set in a key.\n<p>@param [String] destination destination key …\n"],["sdiffstore","Redis::Distributed","Redis/Distributed.html#method-i-sdiffstore","(destination, *keys)","<p>Subtract multiple sets and store the resulting set in a key.\n"],["select","Redis","Redis.html#method-i-select","(db)","<p>Change the selected database for the current connection.\n<p>@param [Fixnum] db zero-based index of the DB …\n"],["select","Redis::Distributed","Redis/Distributed.html#method-i-select","(db)","<p>Change the selected database for the current connection.\n"],["send","Redis::Connection::RedisClient","Redis/Connection/RedisClient.html#method-i-send","(data)",""],["set","Redis","Redis.html#method-i-set","(key, value)","<p>Set the string value of a key.\n<p>@param [String] key @param [String] value @return `“OK”`\n"],["set","Redis::Distributed","Redis/Distributed.html#method-i-set","(key, value)","<p>Set the string value of a key.\n"],["set_tcp_keepalive","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-set_tcp_keepalive","(keepalive)",""],["setbit","Redis","Redis.html#method-i-setbit","(key, offset, value)","<p>Sets or clears the bit at offset in the string value stored at key.\n<p>@param [String] key @param [Fixnum] …\n"],["setbit","Redis::Distributed","Redis/Distributed.html#method-i-setbit","(key, offset, value)","<p>Sets or clears the bit at offset in the string value stored at key.\n"],["setex","Redis","Redis.html#method-i-setex","(key, ttl, value)","<p>Set the time to live in seconds of a key.\n<p>@param [String] key @param [Fixnum] ttl @param [String] value …\n"],["setex","Redis::Distributed","Redis/Distributed.html#method-i-setex","(key, ttl, value)","<p>Set the time to live in seconds of a key.\n"],["setnx","Redis","Redis.html#method-i-setnx","(key, value)","<p>Set the value of a key, only if the key does not exist.\n<p>@param [String] key @param [String] value @return …\n"],["setnx","Redis::Distributed","Redis/Distributed.html#method-i-setnx","(key, value)","<p>Set the value of a key, only if the key does not exist.\n"],["setrange","Redis","Redis.html#method-i-setrange","(key, offset, value)","<p>Overwrite part of a string at key starting at the specified offset.\n<p>@param [String] key @param [Fixnum] …\n"],["setrange","Redis::Distributed","Redis/Distributed.html#method-i-setrange","(key, offset, value)","<p>Overwrite part of a string at key starting at the specified offset.\n"],["shutdown","Redis","Redis.html#method-i-shutdown","()","<p>Synchronously save the dataset to disk and then shut down the server.\n"],["shutdown?","Redis::Pipeline","Redis/Pipeline.html#method-i-shutdown-3F","()",""],["sinter","Redis","Redis.html#method-i-sinter","(*keys)","<p>Intersect multiple sets.\n<p>@param [String, Array&lt;String&gt;] keys keys pointing to sets to\nintersect …\n"],["sinter","Redis::Distributed","Redis/Distributed.html#method-i-sinter","(*keys)","<p>Intersect multiple sets.\n"],["sinterstore","Redis","Redis.html#method-i-sinterstore","(destination, *keys)","<p>Intersect multiple sets and store the resulting set in a key.\n<p>@param [String] destination destination …\n"],["sinterstore","Redis::Distributed","Redis/Distributed.html#method-i-sinterstore","(destination, *keys)","<p>Intersect multiple sets and store the resulting set in a key.\n"],["sismember","Redis","Redis.html#method-i-sismember","(key, member)","<p>Determine if a given value is a member of a set.\n<p>@param [String] key @param [String] member @return [Boolean] …\n"],["sismember","Redis::Distributed","Redis/Distributed.html#method-i-sismember","(key, member)","<p>Determine if a given value is a member of a set.\n"],["slaveof","Redis","Redis.html#method-i-slaveof","(host, port)","<p>Make the server a slave of another instance, or promote it as master.\n"],["slowlog","Redis","Redis.html#method-i-slowlog","(subcommand, length=nil)","<p>Interact with the slowlog (get, len, reset)\n<p>@param [String] subcommand e.g. `get`, `len`, `reset` @param …\n"],["smembers","Redis","Redis.html#method-i-smembers","(key)","<p>Get all the members in a set.\n<p>@param [String] key @return [Array&lt;String&gt;]\n"],["smembers","Redis::Distributed","Redis/Distributed.html#method-i-smembers","(key)","<p>Get all the members in a set.\n"],["smove","Redis","Redis.html#method-i-smove","(source, destination, member)","<p>Move a member from one set to another.\n<p>@param [String] source source key @param [String] destination destination …\n"],["smove","Redis::Distributed","Redis/Distributed.html#method-i-smove","(source, destination, member)","<p>Move a member from one set to another.\n"],["sort","Redis","Redis.html#method-i-sort","(key, options = {})","<p>Sort the elements in a list, set or sorted set.\n<p>@example Retrieve the first 2 elements from an alphabetically …\n"],["sort","Redis::Distributed","Redis/Distributed.html#method-i-sort","(key, options = {})","<p>Sort the elements in a list, set or sorted set.\n"],["spop","Redis","Redis.html#method-i-spop","(key)","<p>Remove and return a random member from a set.\n<p>@param [String] key @return [String]\n"],["spop","Redis::Distributed","Redis/Distributed.html#method-i-spop","(key)","<p>Remove and return a random member from a set.\n"],["srandmember","Redis","Redis.html#method-i-srandmember","(key, count = nil)","<p>Get one or more random members from a set.\n<p>@param [String] key @param [Fixnum] count @return [String] …\n"],["srandmember","Redis::Distributed","Redis/Distributed.html#method-i-srandmember","(key, count = nil)","<p>Get a random member from a set.\n"],["srem","Redis","Redis.html#method-i-srem","(key, member)","<p>Remove one or more members from a set.\n<p>@param [String] key @param [String, Array&lt;String&gt;] member …\n"],["srem","Redis::Distributed","Redis/Distributed.html#method-i-srem","(key, member)","<p>Remove one or more members from a set.\n"],["strlen","Redis","Redis.html#method-i-strlen","(key)","<p>Get the length of the value stored in a key.\n<p>@param [String] key @return [Fixnum] the length of the value …\n"],["strlen","Redis::Distributed","Redis/Distributed.html#method-i-strlen","(key)","<p>Get the length of the value stored in a key.\n"],["subscribe","Redis","Redis.html#method-i-subscribe","(*channels, &block)","<p>Listen for messages published to the given channels.\n"],["subscribe","Redis::Distributed","Redis/Distributed.html#method-i-subscribe","(channel, *channels, &block)","<p>Listen for messages published to the given channels.\n"],["subscribe","Redis::SubscribedClient","Redis/SubscribedClient.html#method-i-subscribe","(*channels, &block)",""],["subscribe","Redis::Subscription","Redis/Subscription.html#method-i-subscribe","(&block)",""],["subscribed?","Redis","Redis.html#method-i-subscribed-3F","()",""],["subscribed?","Redis::Distributed","Redis/Distributed.html#method-i-subscribed-3F","()",""],["subscription","Redis::SubscribedClient","Redis/SubscribedClient.html#method-i-subscription","(start, stop, channels, block)",""],["sunion","Redis","Redis.html#method-i-sunion","(*keys)","<p>Add multiple sets.\n<p>@param [String, Array&lt;String&gt;] keys keys pointing to sets to unify\n@return [ …\n"],["sunion","Redis::Distributed","Redis/Distributed.html#method-i-sunion","(*keys)","<p>Add multiple sets.\n"],["sunionstore","Redis","Redis.html#method-i-sunionstore","(destination, *keys)","<p>Add multiple sets and store the resulting set in a key.\n<p>@param [String] destination destination key @param …\n"],["sunionstore","Redis::Distributed","Redis/Distributed.html#method-i-sunionstore","(destination, *keys)","<p>Add multiple sets and store the resulting set in a key.\n"],["sync","Redis","Redis.html#method-i-sync","()","<p>Internal command used for replication.\n"],["synchronize","Redis","Redis.html#method-i-synchronize","()",""],["time","Redis","Redis.html#method-i-time","()","<p>Return the server time.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">r</span>.<span class=\"ruby-identifier\">time</span> <span class=\"ruby-comment\"># =&gt; [ 1333093196, 606806 ]</span>\n</pre>\n"],["time","Redis::Distributed","Redis/Distributed.html#method-i-time","()","<p>Get server time: an UNIX timestamp and the elapsed microseconds in the\ncurrent second.\n"],["timeout","Redis::Client","Redis/Client.html#method-i-timeout","()",""],["timeout=","Redis::Connection::Hiredis","Redis/Connection/Hiredis.html#method-i-timeout-3D","(timeout)",""],["timeout=","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-timeout-3D","(timeout)",""],["timeout=","Redis::Connection::SocketMixin","Redis/Connection/SocketMixin.html#method-i-timeout-3D","(timeout)",""],["timeout=","Redis::Connection::Synchrony","Redis/Connection/Synchrony.html#method-i-timeout-3D","(timeout)",""],["ttl","Redis","Redis.html#method-i-ttl","(key)","<p>Get the time to live (in seconds) for a key.\n<p>@param [String] key @return [Fixnum] remaining time to live …\n"],["ttl","Redis::Distributed","Redis/Distributed.html#method-i-ttl","(key)","<p>Get the time to live (in seconds) for a key.\n"],["type","Redis","Redis.html#method-i-type","(key)","<p>Determine the type stored at key.\n<p>@param [String] key @return [String] `string`, `list`, `set`, `zset`, …\n"],["type","Redis::Distributed","Redis/Distributed.html#method-i-type","(key)","<p>Determine the type stored at key.\n"],["unbind","Redis::Connection::RedisClient","Redis/Connection/RedisClient.html#method-i-unbind","()",""],["unsubscribe","Redis","Redis.html#method-i-unsubscribe","(*channels)","<p>Stop listening for messages posted to the given channels.\n"],["unsubscribe","Redis::Distributed","Redis/Distributed.html#method-i-unsubscribe","(*channels)","<p>Stop listening for messages posted to the given channels.\n"],["unsubscribe","Redis::SubscribedClient","Redis/SubscribedClient.html#method-i-unsubscribe","(*channels)",""],["unsubscribe","Redis::Subscription","Redis/Subscription.html#method-i-unsubscribe","(&block)",""],["unwatch","Redis","Redis.html#method-i-unwatch","()","<p>Forget about all watched keys.\n<p>@return [String] `OK`\n<p>@see #watch @see #multi\n"],["unwatch","Redis::Distributed","Redis/Distributed.html#method-i-unwatch","()","<p>Forget about all watched keys.\n"],["value","Redis::Future","Redis/Future.html#method-i-value","()",""],["watch","Redis","Redis.html#method-i-watch","(*keys)","<p>Watch the given keys to determine execution of the MULTI/EXEC block.\n<p>Using a block is optional, but is …\n"],["watch","Redis::Distributed","Redis/Distributed.html#method-i-watch","(*keys)","<p>Watch the given keys to determine execution of the MULTI/EXEC block.\n"],["with_reconnect","Redis","Redis.html#method-i-with_reconnect","(val=true, &blk)","<p>Run code with the client reconnecting\n"],["with_reconnect","Redis::Client","Redis/Client.html#method-i-with_reconnect","(val=true)",""],["with_reconnect","Redis::Pipeline","Redis/Pipeline.html#method-i-with_reconnect","(val=true)",""],["with_reconnect?","Redis::Pipeline","Redis/Pipeline.html#method-i-with_reconnect-3F","()",""],["with_socket_timeout","Redis::Client","Redis/Client.html#method-i-with_socket_timeout","(timeout)",""],["without_reconnect","Redis","Redis.html#method-i-without_reconnect","(&blk)","<p>Run code without the client reconnecting\n"],["without_reconnect","Redis::Client","Redis/Client.html#method-i-without_reconnect","(&blk)",""],["without_reconnect","Redis::Pipeline","Redis/Pipeline.html#method-i-without_reconnect","(&blk)",""],["without_reconnect?","Redis::Pipeline","Redis/Pipeline.html#method-i-without_reconnect-3F","()",""],["without_socket_timeout","Redis::Client","Redis/Client.html#method-i-without_socket_timeout","(&blk)",""],["write","Redis::Client","Redis/Client.html#method-i-write","(command)",""],["write","Redis::Connection::Hiredis","Redis/Connection/Hiredis.html#method-i-write","(command)",""],["write","Redis::Connection::Ruby","Redis/Connection/Ruby.html#method-i-write","(command)",""],["write","Redis::Connection::Synchrony","Redis/Connection/Synchrony.html#method-i-write","(command)",""],["zadd","Redis","Redis.html#method-i-zadd","(key, *args)","<p>Add one or more members to a sorted set, or update the score for members\nthat already exist.\n<p>@example …\n"],["zadd","Redis::Distributed","Redis/Distributed.html#method-i-zadd","(key, *args)","<p>Add one or more members to a sorted set, or update the score for members\nthat already exist.\n"],["zcard","Redis","Redis.html#method-i-zcard","(key)","<p>Get the number of members in a sorted set.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">zcard</span>(<span class=\"ruby-string\">&quot;zset&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; 4</span>\n</pre>\n"],["zcard","Redis::Distributed","Redis/Distributed.html#method-i-zcard","(key)","<p>Get the number of members in a sorted set.\n"],["zcount","Redis","Redis.html#method-i-zcount","(key, min, max)","<p>Count the members in a sorted set with scores within the given values.\n<p>@example Count members with score …\n"],["zcount","Redis::Distributed","Redis/Distributed.html#method-i-zcount","(key, min, max)","<p>Get the number of members in a particular score range.\n"],["zincrby","Redis","Redis.html#method-i-zincrby","(key, increment, member)","<p>Increment the score of a member in a sorted set.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">redis</span>.<span class=\"ruby-identifier\">zincrby</span>(<span class=\"ruby-string\">&quot;zset&quot;</span>, <span class=\"ruby-value\">32.0</span>, <span class=\"ruby-string\">&quot;a&quot;</span>)\n  <span class=\"ruby-comment\"># =&gt; 64.0</span>\n</pre>\n"],["zincrby","Redis::Distributed","Redis/Distributed.html#method-i-zincrby","(key, increment, member)","<p>Increment the score of a member in a sorted set.\n"],["zinterstore","Redis","Redis.html#method-i-zinterstore","(destination, keys, options = {})","<p>Intersect multiple sorted sets and store the resulting sorted set in a new\nkey.\n<p>@example Compute the intersection …\n"],["zinterstore","Redis::Distributed","Redis/Distributed.html#method-i-zinterstore","(destination, keys, options = {})","<p>Intersect multiple sorted sets and store the resulting sorted set in a new\nkey.\n"],["zrange","Redis","Redis.html#method-i-zrange","(key, start, stop, options = {})","<p>Return a range of members in a sorted set, by index.\n<p>@example Retrieve all members from a sorted set\n\n<pre>redis.zrange(&quot;zset&quot;, ...</pre>\n"],["zrange","Redis::Distributed","Redis/Distributed.html#method-i-zrange","(key, start, stop, options = {})","<p>Return a range of members in a sorted set, by index.\n"],["zrangebyscore","Redis","Redis.html#method-i-zrangebyscore","(key, min, max, options = {})","<p>Return a range of members in a sorted set, by score.\n<p>@example Retrieve members with score `&gt;= 5` and …\n"],["zrangebyscore","Redis::Distributed","Redis/Distributed.html#method-i-zrangebyscore","(key, min, max, options = {})","<p>Return a range of members in a sorted set, by score.\n"],["zrank","Redis","Redis.html#method-i-zrank","(key, member)","<p>Determine the index of a member in a sorted set.\n<p>@param [String] key @param [String] member @return [Fixnum] …\n"],["zrank","Redis::Distributed","Redis/Distributed.html#method-i-zrank","(key, member)","<p>Determine the index of a member in a sorted set.\n"],["zrem","Redis","Redis.html#method-i-zrem","(key, member)","<p>Remove one or more members from a sorted set.\n<p>@example Remove a single member from a sorted set\n\n<pre>redis.zrem(&quot;zset&quot;, ...</pre>\n"],["zrem","Redis::Distributed","Redis/Distributed.html#method-i-zrem","(key, member)","<p>Remove one or more members from a sorted set.\n"],["zremrangebyrank","Redis","Redis.html#method-i-zremrangebyrank","(key, start, stop)","<p>Remove all members in a sorted set within the given indexes.\n<p>@example Remove first 5 members\n\n<pre>redis.zremrangebyrank(&quot;zset&quot;, ...</pre>\n"],["zremrangebyrank","Redis::Distributed","Redis/Distributed.html#method-i-zremrangebyrank","(key, start, stop)","<p>Remove all members in a sorted set within the given indexes.\n"],["zremrangebyscore","Redis","Redis.html#method-i-zremrangebyscore","(key, min, max)","<p>Remove all members in a sorted set within the given scores.\n<p>@example Remove members with score `&gt;= …\n"],["zremrangebyscore","Redis::Distributed","Redis/Distributed.html#method-i-zremrangebyscore","(key, min, max)","<p>Remove all members in a sorted set within the given scores.\n"],["zrevrange","Redis","Redis.html#method-i-zrevrange","(key, start, stop, options = {})","<p>Return a range of members in a sorted set, by index, with scores ordered\nfrom high to low.\n<p>@example Retrieve …\n"],["zrevrange","Redis::Distributed","Redis/Distributed.html#method-i-zrevrange","(key, start, stop, options = {})","<p>Return a range of members in a sorted set, by index, with scores ordered\nfrom high to low.\n"],["zrevrangebyscore","Redis","Redis.html#method-i-zrevrangebyscore","(key, max, min, options = {})","<p>Return a range of members in a sorted set, by score, with scores ordered\nfrom high to low.\n<p>@example Retrieve …\n"],["zrevrangebyscore","Redis::Distributed","Redis/Distributed.html#method-i-zrevrangebyscore","(key, max, min, options = {})","<p>Return a range of members in a sorted set, by score, with scores ordered\nfrom high to low.\n"],["zrevrank","Redis","Redis.html#method-i-zrevrank","(key, member)","<p>Determine the index of a member in a sorted set, with scores ordered from\nhigh to low.\n<p>@param [String] …\n"],["zrevrank","Redis::Distributed","Redis/Distributed.html#method-i-zrevrank","(key, member)","<p>Determine the index of a member in a sorted set, with scores ordered from\nhigh to low.\n"],["zscore","Redis","Redis.html#method-i-zscore","(key, member)","<p>Get the score associated with the given member in a sorted set.\n<p>@example Get the score for member “a” …\n"],["zscore","Redis::Distributed","Redis/Distributed.html#method-i-zscore","(key, member)","<p>Get the score associated with the given member in a sorted set.\n"],["zunionstore","Redis","Redis.html#method-i-zunionstore","(destination, keys, options = {})","<p>Add multiple sorted sets and store the resulting sorted set in a new key.\n<p>@example Compute the union of …\n"],["zunionstore","Redis::Distributed","Redis/Distributed.html#method-i-zunionstore","(destination, keys, options = {})","<p>Add multiple sorted sets and store the resulting sorted set in a new key.\n"]]}}