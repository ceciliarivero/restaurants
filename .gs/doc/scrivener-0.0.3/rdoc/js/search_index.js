var search_data = {"index":{"searchIndex":["scrivener","validations","assert()","assert_decimal()","assert_email()","assert_format()","assert_length()","assert_member()","assert_numeric()","assert_present()","assert_url()","attributes()","errors()","new()","valid?()","validate()"],"longSearchIndex":["scrivener","scrivener::validations","scrivener::validations#assert()","scrivener::validations#assert_decimal()","scrivener::validations#assert_email()","scrivener::validations#assert_format()","scrivener::validations#assert_length()","scrivener::validations#assert_member()","scrivener::validations#assert_numeric()","scrivener::validations#assert_present()","scrivener::validations#assert_url()","scrivener#attributes()","scrivener::validations#errors()","scrivener::new()","scrivener::validations#valid?()","scrivener::validations#validate()"],"info":[["Scrivener","","Scrivener.html","",""],["Scrivener::Validations","","Scrivener/Validations.html","","<p>Provides a base implementation for extensible validation routines.\n{Scrivener::Validations} currently …\n"],["assert","Scrivener::Validations","Scrivener/Validations.html#method-i-assert","(value, error)","<p>The grand daddy of all assertions. If you want to build custom assertions,\nor even quick and dirty ones, …\n"],["assert_decimal","Scrivener::Validations","Scrivener/Validations.html#method-i-assert_decimal","(att, error = [att, :not_decimal])",""],["assert_email","Scrivener::Validations","Scrivener/Validations.html#method-i-assert_email","(att, error = [att, :not_email])",""],["assert_format","Scrivener::Validations","Scrivener/Validations.html#method-i-assert_format","(att, format, error = [att, :format])","<p>Allows you to do a validation check against a regular expression. It’s\nimportant to note that this internally …\n"],["assert_length","Scrivener::Validations","Scrivener/Validations.html#method-i-assert_length","(att, range, error = [att, :not_in_range])",""],["assert_member","Scrivener::Validations","Scrivener/Validations.html#method-i-assert_member","(att, set, err = [att, :not_valid])",""],["assert_numeric","Scrivener::Validations","Scrivener/Validations.html#method-i-assert_numeric","(att, error = [att, :not_numeric])","<p>Checks if all the characters of an attribute is a digit. If you want to\nverify that a value is a decimal, …\n"],["assert_present","Scrivener::Validations","Scrivener/Validations.html#method-i-assert_present","(att, error = [att, :not_present])","<p>The most basic and highly useful assertion. Simply checks if the value of\nthe attribute is empty.\n<p>@param …\n"],["assert_url","Scrivener::Validations","Scrivener/Validations.html#method-i-assert_url","(att, error = [att, :not_url])",""],["attributes","Scrivener","Scrivener.html#method-i-attributes","()","<p>Return hash of attributes and values.\n"],["errors","Scrivener::Validations","Scrivener/Validations.html#method-i-errors","()","<p>Hash of errors for each attribute in this model.\n"],["new","Scrivener","Scrivener.html#method-c-new","(attrs)","<p>Initialize with a hash of attributes and values. If extra attributes are\nsent, a NoMethodError exception …\n"],["valid?","Scrivener::Validations","Scrivener/Validations.html#method-i-valid-3F","()","<p>Check if the current model state is valid. Each call to {#valid?} will\nreset the {#errors} array.\n<p>All …\n"],["validate","Scrivener::Validations","Scrivener/Validations.html#method-i-validate","()","<p>Base validate implementation. Override this method in subclasses.\n"]]}}